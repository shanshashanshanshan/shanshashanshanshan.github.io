<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>VBA基础篇</title>
    <url>/2024/07/15/VBA%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<ul>
<li>学习笔记</li>
</ul>
<p>不同类型的代码需要写在不同的地方</p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241003185604639.png" alt="image-20241003185604639"></p>
<h3 id="什么是宏："><a href="#什么是宏：" class="headerlink" title="什么是宏："></a>什么是宏：</h3><p>宏是一种功能非常强大的文本展开工具；</p>
<p>在excel中的宏没有那么复杂，它就是一段用VBA编写的小程序</p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009103942703.png" alt="image-20241009103942703"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009104249843.png" alt="image-20241009104249843"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009104651695.png" alt="image-20241009104651695"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009104718397.png" alt="image-20241009104718397"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009114346145.png" alt="image-20241009114346145"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009115045888.png" alt="image-20241009115045888"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009115149788.png" alt="image-20241009115149788"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009115315717.png" alt="image-20241009115315717"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009115408996.png" alt="image-20241009115408996"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009115500982.png" alt="image-20241009115500982"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009115904043.png" alt="image-20241009115904043"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009174322027.png" alt="image-20241009174322027"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009174348070.png" alt="image-20241009174348070"></p>
<h3 id="强制声明机制"><a href="#强制声明机制" class="headerlink" title="强制声明机制"></a>强制声明机制<img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009174950601.png" alt="image-20241009174950601"></h3><p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009175043480.png" alt="image-20241009175043480"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009175056657.png" alt="image-20241009175056657"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009175346723.png" alt="image-20241009175346723"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009175359690.png" alt="image-20241009175359690"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009175433926.png" alt="image-20241009175433926"></p>
<p>for循环</p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009185034778.png" alt="image-20241009185034778"></p>
<p>逆序的循环：step&#x3D;-1</p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009185303034.png" alt="image-20241009185303034"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009185422952.png" alt="image-20241009185422952"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009192627168.png" alt="image-20241009192627168"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009192751056.png" alt="image-20241009192751056"></p>
<p>尽量还是写在不同行，使结构更清晰</p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009192913965.png" alt="image-20241009192913965"></p>
<p>嵌套的if语句：</p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009193124343.png" alt="image-20241009193124343"></p>
<p>多个分支结构：</p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009193408400.png" alt="image-20241009193408400"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009193718070.png" alt="image-20241009193718070"></p>
<p><img src="https://shan-log.oss-cn-beijing.aliyuncs.com/img/image-20241009193732354.png" alt="image-20241009193732354"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241009233202980.png" alt="image-20241009233202980"></p>
<p>添加监视：调试-&gt;添加监视-&gt;表达式</p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241009233747060.png" alt="image-20241009233747060"></p>
<p>关于字符串：</p>
<p>1.两个括号括起来（没有双引号会被认为是变量名）</p>
<p>2.字符串中可以包括各种特殊字符（如空格）</p>
<p>3.字符串中可以包含多个字符、1个字符、甚至0个字符</p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241009234658567.png" alt="image-20241009234658567"></p>
<p>4.大写字母和小写字母是不一样的字符</p>
<p>5.由数字字符构成的字符串并不是数字</p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241009234927337.png" alt="image-20241009234927337"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241009234942606.png" alt="image-20241009234942606"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241009234956668.png" alt="image-20241009234956668"></p>
<p>因为在VBA中，变量名加&amp;有特殊含义</p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241009235202343.png" alt="image-20241009235202343"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241009235317336.png" alt="image-20241009235317336"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241009235359945.png" alt="image-20241009235359945"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241009235423961.png" alt="image-20241009235423961"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241009235452842.png" alt="image-20241009235452842"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241009235509870.png" alt="image-20241009235509870"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010000234359.png" alt="image-20241010000234359"></p>
<p>当我们想用vba代码自动的操作excel中的某种元素时，比如插入一个饼图，那么我们只需要知道饼图在VBA中是用哪一种变量名代表的，它有哪些属性和方法，然后去调用它就行。</p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010000527445.png" alt="image-20241010000527445"></p>
<p>当我们希望用VBA代码自动执行一段操作的时候，我们可以先自己手工地执行一遍操作，这时让excel把我们手工的操作记录下来，然后它会把这些动作翻译成VBA代码写在VBE编辑器中</p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010000940069.png" alt="image-20241010000940069"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010175142653.png" alt="image-20241010175142653"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010182938001.png" alt="image-20241010182938001"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010183020544.png" alt="image-20241010183020544"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010183058291.png" alt="image-20241010183058291"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010183230633.png" alt="image-20241010183230633"></p>
<p>多重嵌套循环：</p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010185637341.png" alt="image-20241010185637341"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010185744391.png" alt="image-20241010185744391"></p>
<p>rem加上空格再加注释语句</p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010185808254.png" alt="image-20241010185808254"></p>
<p>为了方便，rem可以用单引号代替</p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010185842795.png" alt="image-20241010185842795"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010185937003.png" alt="image-20241010185937003"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010211323142.png" alt="image-20241010211323142"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010211408785.png" alt="image-20241010211408785"></p>
<p>微软已经替我们写好了类、属性、方法</p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010211601098.png" alt="image-20241010211601098"></p>
<p>excel中的类很多，记住其中几个主要的类就好了</p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010211643045.png" alt="image-20241010211643045"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010211952688.png" alt="image-20241010211952688"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010212136593.png" alt="image-20241010212136593"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010212350868.png" alt="image-20241010212350868"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010212510310.png" alt="image-20241010212510310"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010212522680.png" alt="image-20241010212522680"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010212651395.png" alt="image-20241010212651395"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010212853840.png" alt="image-20241010212853840"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010212905814.png" alt="image-20241010212905814"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241010213146637.png" alt="image-20241010213146637"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241011135122950.png" alt="image-20241011135122950"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241011135431553.png" alt="image-20241011135431553"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241011135554879.png" alt="image-20241011135554879"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241011135955237.png" alt="image-20241011135955237"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241011140157977.png" alt="image-20241011140157977"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241011140207700.png" alt="image-20241011140207700"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241011140325825.png" alt="image-20241011140325825"></p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241011140345649.png" alt="image-20241011140345649"></p>
<pre><code>Sub allScore()
    Dim i,k
    Dim wPerson, wAll As Worksheet

    Set wAll = Worksheets(&quot;总分榜&quot;)
    k=2
    
    For i = 1 To Worksheets.Count
        Set wPerson = Worksheets(i)
        if wPerson.names &lt;&gt; &quot;总分榜&quot; Then
            wAll.Cells(i, 1) = wPerson.Cells(1, 2)    
            wAll.Cells(i, 2) = wPerson.Cells(2, 3)    
            
            k=k+1
        End If
        
    Next i

End Sub
</code></pre>
<p>这节课讲的将工作表分别汇总，再登记到一张新的工作表里的操作在日常生活中非常常见，因此需要多熟悉，记牢，做到自己能够编写程序。</p>
<p><img src="/.cn//imgs/$%7Bfiilename%7D/image-20241011140725951.png" alt="image-20241011140725951"></p>
]]></content>
      <categories>
        <category>-笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常见操作</title>
    <url>/2024/07/14/linux%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="linux目录结构"><a href="#linux目录结构" class="headerlink" title="linux目录结构"></a>linux目录结构</h2><ul>
<li>linux文件系统没有盘符的概念，就是没有C盘，D盘等等，所有的文件入口是从根目录开始</li>
<li>系统自带的文件不要删或者修改</li>
</ul>
<h2 id="linux命令（重点）"><a href="#linux命令（重点）" class="headerlink" title="linux命令（重点）"></a>linux命令（重点）</h2><h5 id="命令格式：command-option-paramaters"><a href="#命令格式：command-option-paramaters" class="headerlink" title="命令格式：command -option paramaters"></a>命令格式：command -option paramaters</h5><p>绝对路径：从根目录开始</p>
<p>相对路径：从当前目录开始</p>
<h3 id="ls：list的缩写"><a href="#ls：list的缩写" class="headerlink" title="ls：list的缩写"></a>ls：list的缩写</h3><ul>
<li>查看指定目录下的文件和文件夹（内容）</li>
<li>ls：查看当前目录的内容（文件和文件夹），绝对路径写法</li>
<li>ls &#x2F;root：查看指定目录&#x2F;root里面的内容，相对路径写法</li>
<li>ls &#x2F;root&#x2F;home： 同时查看多个目录下的内容<ul>
<li>-a ：all 所有，隐藏和非隐藏的文件和文件夹<ul>
<li>ls -a：查看当前目录下的隐藏和非隐藏的文件和文件夹</li>
<li>ls -a &#x2F;home：查看指定目录下隐藏和非隐藏的文件和文件夹</li>
</ul>
</li>
<li>-l：list简写，列表显示，以列表形式显示指定目录下的文件和文件夹<ul>
<li>ls -l：以列表形式显示当前目录下的文件和文件夹</li>
<li>ls -l &#x2F;home：-ls -l &#x2F;home :以列表形式显示指定目录下的内容，绝对路径</li>
<li>ll ：ls -l简写</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="ps-process-status-进程状态"><a href="#ps-process-status-进程状态" class="headerlink" title="ps: process status,进程状态-"></a>ps: process status,进程状态-</h3><ul>
<li>ps -ef:查看当前正在运行的进程</li>
</ul>
<h3 id="kill：终止"><a href="#kill：终止" class="headerlink" title="kill：终止"></a>kill：终止</h3><ul>
<li><p>kill 37922 ：终止进程37922，有时候不一定会终止进程</p>
</li>
<li><p>kill -9 37949：杀死进程37949，一定会杀死进程</p>
</li>
<li><p>kill -l：查看kill命令的所有信号</p>
</li>
</ul>
<h3 id="ifconfig：查看虚拟机的网络配置信息"><a href="#ifconfig：查看虚拟机的网络配置信息" class="headerlink" title="ifconfig：查看虚拟机的网络配置信息"></a>ifconfig：查看虚拟机的网络配置信息</h3><ul>
<li>windows：ipconfig</li>
<li>iOS：ifconfig</li>
</ul>
<h3 id="clear：清屏命令"><a href="#clear：清屏命令" class="headerlink" title="clear：清屏命令"></a>clear：清屏命令</h3><ul>
<li>也可以用ctrl + l 来替代，也是清屏</li>
</ul>
<h3 id="pwd：显示当前目录的绝对路径"><a href="#pwd：显示当前目录的绝对路径" class="headerlink" title="pwd：显示当前目录的绝对路径"></a>pwd：显示当前目录的绝对路径</h3><h3 id="shutdown：关机"><a href="#shutdown：关机" class="headerlink" title="shutdown：关机"></a>shutdown：关机</h3><ul>
<li>reboot：重启</li>
<li>shutdown -h now：立马关机</li>
<li>halt：不断电关机</li>
</ul>
<h3 id="cd：change-directory，切换目录"><a href="#cd：change-directory，切换目录" class="headerlink" title="cd：change directory，切换目录"></a>cd：change directory，切换目录</h3><ul>
<li>cd:切换到当前登录用户的家目录，如果是itcast用户登录的，就回到&#x2F;home&#x2F;itcast,如果是root用户登录的就回到&#x2F;root</li>
<li>cd  &#x2F;big59&#x2F;test1: 切换到&#x2F;big59&#x2F;test1目录下</li>
<li>cd .. :返回上一级目录</li>
<li>cd -：在最近的两个目录间切换</li>
<li>cd &#x2F; ：切换到根目录</li>
</ul>
<h3 id="hostname：查看当前服务器的主机名称"><a href="#hostname：查看当前服务器的主机名称" class="headerlink" title="hostname：查看当前服务器的主机名称"></a>hostname：查看当前服务器的主机名称</h3><h3 id="mkdir：make-directory，创建文件夹"><a href="#mkdir：make-directory，创建文件夹" class="headerlink" title="mkdir：make directory，创建文件夹"></a>mkdir：make directory，创建文件夹</h3><ul>
<li>cd &#x2F;bigdata_59:</li>
<li>cd &#x2F;bigdata_59 :先切换到&#x2F;bigdata_59目录下</li>
<li>mkdir test3 :在当前目录下创建文件夹test3，相对路径</li>
<li>mkdir &#x2F;big59&#x2F;test3 :在指定目录下创建文件夹test3，绝对路径</li>
<li>-p :递归创建有层级的文件夹，先检查，判断之后再创建<ul>
<li>mkdir -p test1&#x2F;test11&#x2F;test111 :在test1里面检查是否有test11，如果有就不管直接在test11里面创建test111，如果test11不存<br>在，先创建test11，再到test11里面创建test111</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/07/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>公考概念扫盲</title>
    <url>/2024/08/05/%E5%85%AC%E8%80%83/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul>
<li><p><strong>国考</strong>：是指中央直属行政单位公务员招录考试。例如税务、海关、部委等中央直属部门。</p>
</li>
<li><p><strong>省考：</strong>是指省级管理机关公务员招录考试，例如省工信厅、市县级人民政府组成部门。</p>
</li>
<li><p><strong>联考：</strong>是指统一在2-3月份举办的各省省考。</p>
</li>
<li><p><strong>统考：</strong>是指2-3月份举办且试卷统一命制的各省省考。</p>
</li>
</ul>
<p>综上所述：国考与省考并列，省考包括联考，联考包括统考。</p>
<p><strong>国考省考不同点：</strong>考试时间不同，单位隶属序列不同、单位级别不同、待遇不同、考试题目略有差别。</p>
<p>​	今年国考，预计10月底左右开始报名，11月底或12月初进行笔试。</p>
<p>​	明年联考，预计1月初左右开始报名，1月底或者2月初进行笔试。</p>
<p><strong>国考省考相同点：</strong>行测申论题型相似，本质相同，国考一般引导省考发展。</p>
<p><strong>参加考试建议：</strong>逢考必参加，以上岸为主，教材视频通用，而且完全不矛盾。</p>
<p><strong>综合发展待遇：</strong>国考中央部委（例如中央统战部）&gt;省考省厅（例如省公安厅）&gt;国考垂管强势部门（例如税务）&gt;一般省考单位&gt;国考弱势垂管部门（例如气象）。</p>
<hr>
<h2 id="公考和事业编考试的区别和联系"><a href="#公考和事业编考试的区别和联系" class="headerlink" title="公考和事业编考试的区别和联系"></a>公考和事业编考试的区别和联系</h2><ol>
<li><strong>联系</strong>：<br>政府由机关（公务员）组成，而机关会下设事业单位。例如北京政府由政府办、工信局、住建局等单位构成，而住建局下又有物管办、房产处等单位。换句话说，事业单位隶属于机关单位。而公务员是在行政单位工作，事业编人员是在事业单位工作，公务员可以交流任职，但事业单位人员很难调到机关单位工作</li>
<li><strong>对比：</strong><ul>
<li>发展前景：公务员要略胜一筹，事业编制一般有限制</li>
<li>待遇报酬：绝大多数公务员要更好，少部分盈利性事业单位待遇较高。</li>
<li>笔试试卷方面：公务员考试行测申论逻辑性强，复习提高快；事业单位考试全国区别较大，绝大多数以公基为主，需要长期积累背诵。</li>
<li>面试考试方面：二者均以结构化为主，但公务员考试更加透明、公正、正规。</li>
<li>复习建议方面，综上所述，应该更以复习公务员考试为主，顺便参加事业单位考试，且不用专门复习。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="公考流程"><a href="#公考流程" class="headerlink" title="公考流程"></a>公考流程</h2><p>公布岗位、报名、缴费、笔试、查询笔试成绩、确认面试、面试、公示名单、政审、体检、入职。</p>
<p>公布岗位和报名一般在笔试前一个月，因此切勿等岗再报名。不用考虑是否有岗位，省考包容性非常大，也会设置较多的三不限岗位；反之，提高笔试成绩和竞争力是努力重点。</p>
<p>不要总纠结报哪里，选什么岗。无论考哪里，不都是考行测和申论吗</p>
<hr>
<h2 id="上岸分数"><a href="#上岸分数" class="headerlink" title="上岸分数"></a>上岸分数</h2><p>各省试卷难度不一，但基本遵循以下规律：<br>125分：有希望吃面<br>130分：大概率吃面<br>135分：有希望拿岗位笔试第一<br>140分：大概率拿岗位笔试第一<br>145分：能有较大优势进入面试<br>故，行测75分、申论70分应该是努力复习的目标和方向。<br>对于国考，整体难度会更大，分数也会更低，上述参考分数均可下调5分。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>公考</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建相关</title>
    <url>/2024/08/08/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h2 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h2><ul>
<li><p><img src="https://api2.mubu.com/v3/document_image/23703324_2dec1344-f2a8-401d-ac04-2df4eb04b0b1.png" alt="img"></p>
</li>
<li><p>hexo+github+netlify+cloudflare</p>
</li>
<li><p>博客生成框架</p>
<p>它的作用是将用户的输入转化成一个网站目录<br>​</p>
<ul>
<li>由一些html文件、css文件以及js文件组成的目录结构（前端三件套）</li>
</ul>
</li>
<li><p>文件托管平台<br>能够让我们把文件存储在云端，并提供相应的访问和修改的接口</p>
</li>
<li><p>站点部署服务</p>
<p>将一个已经成形的网站部署到互联网上，让网络上的其他主机能够正常访问（最简单的事github，上的github pages，但是这个方式国内的访问速度极慢，此教程中我们使用netlify作为我们部署站点的服务提供商，而把github仅仅作为一个托管文件的场所）</p>
<ul>
<li>netlify除了直接部署静态网络的功能之外，还支持动态的构建网站，也就是我们可以自定义一个构建网站的脚本，比如我们后面会使用的 npm run clean &amp;&amp;npm run build这个脚本，它会先清除之前已经构建好的静态网站，然后重新从头构建，以防某些地方的更新不到位</li>
</ul>
</li>
<li><p>CDN加速服务</p>
</li>
</ul>
<h2 id="遇到的错误"><a href="#遇到的错误" class="headerlink" title="遇到的错误"></a>遇到的错误</h2><h3 id="Error-Spawn-failed"><a href="#Error-Spawn-failed" class="headerlink" title="Error: Spawn failed"></a>Error: Spawn failed</h3><p>FATAL Something’s wrong. Maybe you can find the solution here: <a href="https://hexo.io/docs/troubleshooting.html">https://hexo.io/docs/troubleshooting.html</a></p>
<p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20240809212809868.png" alt="image-20240809212809868"></p>
<p>解决：临时禁用SSL验证(不推荐用于生产环境)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify false</span><br></pre></td></tr></table></figure>

<p>运行git config –global http.sslVerify false后再运行hexo d后还是出现相同的报错，如何解决:</p>
<p>如果禁用 SSL 验证后仍然遇到相同的错误，问题可能更复杂。让我们尝试一些更深入的解决方案：</p>
<ol>
<li><p>检查 Git 版本：<br>运行 <code>git --version</code> 确保您使用的是最新版本的 Git。如果不是，请更新 Git。</p>
</li>
<li><p>检查远程仓库 URL：<br>运行 <code>git remote -v</code> 检查远程仓库的 URL 是否正确。如果使用 HTTPS，尝试切换到 SSH，反之亦然。</p>
</li>
<li><p>清除 Git 凭证：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --system --unset credential.helper</span><br><span class="line">git config --global --unset credential.helper</span><br><span class="line">git config --local --unset credential.helper</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查代理设置：<br>如果您使用代理，确保 Git 的代理设置正确：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>
</li>
<li><p>增加 Git 操作的超时时间：(<strong>运行后再运行hexo d解决问题</strong>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.lowSpeedLimit 0</span><br><span class="line">git config --global http.lowSpeedTime 999999</span><br></pre></td></tr></table></figure>
</li>
<li><p>尝试使用 GitHub CLI：<br>如果您有 GitHub CLI（gh），可以尝试使用它进行身份验证：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gh auth login</span><br></pre></td></tr></table></figure>
</li>
<li><p>手动推送：<br>尝试手动推送到 GitHub 仓库，看看是否能成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd .deploy_git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查 Hexo 配置：<br>确保您的 Hexo <code>_config.yml</code> 文件中的部署设置正确：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;您的</span> <span class="string">GitHub</span> <span class="string">仓库</span> <span class="string">URL&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重新安装 hexo-deployer-git：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-deployer-git</span><br><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 verbose 模式运行 Hexo：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo deploy --debug</span><br></pre></td></tr></table></figure>
<p>这会提供更详细的错误信息，可能有助于诊断问题。</p>
</li>
<li><p>检查系统时间：<br>确保您的系统时间是正确的，时间不正确可能导致 SSL 错误。</p>
</li>
<li><p>临时禁用防火墙和杀毒软件：<br>有时防火墙或杀毒软件可能会干扰 Git 操作。</p>
</li>
</ol>
<p>如果以上方法都不能解决问题，您可以尝试以下替代方案：</p>
<ol>
<li><p>使用其他部署方法：<br>例如，使用 rsync 或 FTP 部署，而不是 Git。</p>
</li>
<li><p>手动部署：<br>生成静态文件后，手动将它们上传到您的 GitHub Pages 仓库。</p>
</li>
<li><p>使用 GitHub Actions：<br>设置 GitHub Actions 工作流来自动部署您的 Hexo 博客，这样可以绕过本地部署问题。</p>
</li>
</ol>
<p>如果问题仍然存在，建议您在 Hexo 的 GitHub 仓库上开一个 issue，提供详细的错误日志和您的环境信息（操作系统、Node.js 版本、Hexo 版本等），以获得更专业的帮助。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>python标注</title>
    <url>/2024/08/03/python%E6%A0%87%E6%B3%A8/</url>
    <content><![CDATA[<h2 id="常见代码块"><a href="#常见代码块" class="headerlink" title="常见代码块"></a>常见代码块</h2><h3 id="合并数据表"><a href="#合并数据表" class="headerlink" title="合并数据表"></a>合并数据表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#选取基本信息表和公开课教学表并合并</span></span><br><span class="line">basic_info_df=all_dataframe_dict[<span class="string">&#x27;基本信息&#x27;</span>].copy()</span><br><span class="line">subject_teach_df=all_dataframe_dict[<span class="string">&quot;公开课教学&quot;</span>].copy()</span><br><span class="line">merge_df=pd.merge(basic_info_df,subject_teach_df,on=<span class="string">&#x27;关联主键&#x27;</span>,how=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#从all_dataframe_dict中取出基本信息表，本人奖项表</span></span><br><span class="line">basic_info_df=all_dataframe_dict[<span class="string">&quot;基本信息&quot;</span>].copy()</span><br><span class="line">reward_info_df=all_dataframe_dict[<span class="string">&quot;本人奖项&quot;</span>].copy()</span><br><span class="line"><span class="comment">#合并数据表</span></span><br><span class="line">merge_df=pd.merge(basic_info_df,reward_info_df,on=<span class="string">&#x27;关联主键&#x27;</span>,how=<span class="string">&#x27;left&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="柱状图相关"><a href="#柱状图相关" class="headerlink" title="柱状图相关"></a>柱状图相关</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基于&quot;基本信息”表的&quot;民族&quot;字段进行统计分析</span></span><br><span class="line">df_basic_info = all_dataframe_dict[<span class="string">&quot;基本信息&quot;</span>].copy()</span><br><span class="line">nation_count = df_basic_info.groupby(<span class="string">&quot;民族&quot;</span>)[<span class="string">&quot;关联主键&quot;</span>].nunique().reset_index()</span><br><span class="line">nation_count.columns = [<span class="string">&quot;民族&quot;</span>,<span class="string">&quot;人数&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照人数进行排序</span></span><br><span class="line">nation_count = nation_count.sort_values(<span class="string">&#x27;人数&#x27;</span>,ascending=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#制作柱状图进行展示</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">sns.barplot(data=nation_count,x=<span class="string">&quot;民族&quot;</span>,y=<span class="string">&quot;人数&quot;</span>,palette=<span class="string">&quot;viridis&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;我校各民族教师的人数统计&#x27;</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">90</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#展示统计结果</span></span><br><span class="line">nation_count</span><br></pre></td></tr></table></figure>

<h3 id="饼图相关"><a href="#饼图相关" class="headerlink" title="饼图相关"></a>饼图相关</h3><ul>
<li><p>统计参与过远郊区交流轮岗的专任教划师占比</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从教师基本信息表中选取所有专任教师的数据</span></span><br><span class="line">basic_info_df=all_dataframe_dict[<span class="string">&quot;基本信息&quot;</span>].copy()</span><br><span class="line">exchange_rotation_df=all_dataframe_dict[<span class="string">&quot;交流轮岗&quot;</span>].copy()</span><br><span class="line"></span><br><span class="line"><span class="comment">#从交流轮岗表中选取参与过远郊区交流轮岗的教师数据</span></span><br><span class="line">far_suburb_exchange_df=exchange_rotation_df[exchange_rotation_df[<span class="string">&quot;交流形式&quot;</span>]==<span class="string">&quot;远郊区交流轮岗&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#合并两张表，使用关联主键进行关联</span></span><br><span class="line">merged_df=pd.merge(basic_info_df,far_suburb_exchange_df,on=<span class="string">&quot;关联主键&quot;</span>，how=<span class="string">&quot;inner&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#可视化展示</span></span><br><span class="line">comt8_df=merged_df[<span class="string">&quot;教职工类别&quot;</span>].value_counts().sort_index()</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">plt.pie(counts_df,labels=counts_df.index,autopct=<span class="string">&#x27;%1.1f%%&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建DataFrame</span></span><br><span class="line">df=pd.DataFrame(&#123;<span class="string">&#x27;教职工类别&#x27;</span>:counts_.df.index,<span class="string">&#x27;人数&#x27;</span>:counts_df.values&#125;)</span><br><span class="line"><span class="comment">#按人数降序排序</span></span><br><span class="line">df=df.sort_values(<span class="string">&#x27;人数&#x27;</span>,ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#重置索引</span></span><br><span class="line">df = df.reset_index(drop=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#打印结果</span></span><br><span class="line">df[<span class="string">&quot;占比&quot;</span>]=df[<span class="string">&quot;人数&quot;</span>]/df[<span class="string">&quot;人数&quot;</span>].<span class="built_in">sum</span>()</span><br><span class="line">df</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="语义顺序"><a href="#语义顺序" class="headerlink" title="语义顺序"></a>语义顺序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义年级顺序</span></span><br><span class="line">grade_order = [<span class="string">&#x27;一年级&#x27;</span>,<span class="string">&#x27;二年级&#x27;</span>, <span class="string">&#x27;三年级&#x27;</span>, <span class="string">&#x27;四年级&#x27;</span>, <span class="string">&#x27;五年级&#x27;</span>, <span class="string">&#x27;六年级&#x27;</span>, <span class="string">&#x27;初一&#x27;</span>, <span class="string">&#x27;初二&#x27;</span>, <span class="string">&#x27;初三&#x27;</span>, <span class="string">&#x27;高一&#x27;</span>, <span class="string">&#x27;高二&#x27;</span>, <span class="string">&#x27;高三&#x27;</span>]</span><br><span class="line"><span class="comment"># 将年级转换为分类型变量，并指定排序顺序</span></span><br><span class="line">merged_df[<span class="string">&#x27;年级&#x27;</span>] = pd.Categorical(merged_df[<span class="string">&#x27;年级&#x27;</span>], categories=grade_order, ordered=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 对学业测评类型进行统计</span></span><br><span class="line">performance_count = merged_df.groupby([<span class="string">&quot;年级&quot;</span>, <span class="string">&quot;学业测评类型&quot;</span>]).size().reset_index(name=<span class="string">&#x27;count&#x27;</span>)</span><br><span class="line"><span class="comment"># 按照年级排序</span></span><br><span class="line">performance_count = performance_count.sort_values(<span class="string">&#x27;年级&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义奖项级别的排序顺序</span></span><br><span class="line">sort_order = [<span class="string">&quot;校级&quot;</span>,<span class="string">&quot;集团(学区)&quot;</span>,<span class="string">&quot;乡镇级&quot;</span>,<span class="string">&quot;区县级&quot;</span>,<span class="string">&quot;市级&quot;</span>,<span class="string">&quot;省级&quot;</span>,<span class="string">&quot;国家级&quot;</span>,<span class="string">&quot;全部&quot;</span>]</span><br><span class="line">base_info_df[<span class="string">&#x27;奖项级别&#x27;</span>] = pd.Categorical(base_info_df[<span class="string">&#x27;奖项级别&#x27;</span>], categories=sort_order, ordered=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常见语义顺序</span></span><br><span class="line">岗位等级：[<span class="string">&#x27;专技13级&#x27;</span>,<span class="string">&#x27;专技12级&#x27;</span>,<span class="string">&#x27;专技11级&#x27;</span>,<span class="string">&#x27;专技10级&#x27;</span>,<span class="string">&#x27;专技9级&#x27;</span>,<span class="string">&#x27;专技8级&#x27;</span>,<span class="string">&#x27;专技7级&#x27;</span>,<span class="string">&#x27;专技6级&#x27;</span>,<span class="string">&#x27;专技5级&#x27;</span>,<span class="string">&#x27;专技4级&#x27;</span>,<span class="string">&#x27;专技3级&#x27;</span>,<span class="string">&#x27;专技2级&#x27;</span>,<span class="string">&#x27;专技1级&#x27;</span>]</span><br><span class="line">本人奖项，奖项级别：[<span class="string">&quot;校级&quot;</span>,<span class="string">&quot;集团(学区)&quot;</span>,<span class="string">&quot;乡镇级&quot;</span>,<span class="string">&quot;区县级&quot;</span>,<span class="string">&quot;市级&quot;</span>,<span class="string">&quot;省级&quot;</span>,<span class="string">&quot;国家级&quot;</span>,<span class="string">&quot;全部&quot;</span>]</span><br><span class="line">公开课级别：[<span class="string">&quot;其他&quot;</span>,<span class="string">&quot;校级&quot;</span>,<span class="string">&quot;学区级&quot;</span>,<span class="string">&quot;区县级&quot;</span>,<span class="string">&quot;市级&quot;</span>,<span class="string">&quot;省级&quot;</span>,<span class="string">&quot;国家级&quot;</span>]</span><br><span class="line">刊物级别：[<span class="string">&#x27;其他&#x27;</span>,<span class="string">&#x27;校级普刊&#x27;</span>,<span class="string">&#x27;学区级普刊&#x27;</span>,<span class="string">&#x27;区级普刊&#x27;</span>,<span class="string">&#x27;市级普刊&#x27;</span>,<span class="string">&#x27;省部级普刊&#x27;</span>,<span class="string">&#x27;国家级普刊&#x27;</span>,<span class="string">&#x27;核心期刊&#x27;</span>]</span><br><span class="line">课题研究：[<span class="string">&#x27;校级课题&#x27;</span>,<span class="string">&#x27;区县级课题&#x27;</span>,<span class="string">&#x27;市厅级课题&#x27;</span>,<span class="string">&#x27;省部级课题&#x27;</span>,<span class="string">&#x27;国家级课题&#x27;</span>,<span class="string">&#x27;全部&#x27;</span>]</span><br><span class="line">学历：[<span class="string">&#x27;其他&#x27;</span>,<span class="string">&#x27;中等职业&#x27;</span>,<span class="string">&#x27;普通高中&#x27;</span>,<span class="string">&#x27;大学专科&#x27;</span>,<span class="string">&#x27;大学本科&#x27;</span>,<span class="string">&#x27;硕士研究生&#x27;</span>,<span class="string">&#x27;博士研究生&#x27;</span>,<span class="string">&#x27;全部&#x27;</span>]</span><br><span class="line">本人角色——论文：[<span class="string">&quot;其他作者&quot;</span>,<span class="string">&quot;第二作者&quot;</span>,<span class="string">&quot;通讯作者&quot;</span>,<span class="string">&quot;第一作者&quot;</span>]</span><br><span class="line">培训学习：[<span class="string">&quot;其他&quot;</span>,<span class="string">&quot;校级&quot;</span>,<span class="string">&quot;区县级&quot;</span>,<span class="string">&quot;市级&quot;</span>,<span class="string">&quot;省级&quot;</span>,<span class="string">&quot;国家级&quot;</span>,<span class="string">&quot;全部&quot;</span>]</span><br><span class="line">职称级别：[<span class="string">&quot;未定&quot;</span>,<span class="string">&quot;三级&quot;</span>,<span class="string">&quot;二级&quot;</span>,<span class="string">&quot;一级&quot;</span>,<span class="string">&quot;高级&quot;</span>,<span class="string">&quot;正高级&quot;</span>,<span class="string">&quot;全部&quot;</span>]</span><br><span class="line">本人奖项，奖项等级：[<span class="string">&quot;不设等级&quot;</span>,<span class="string">&quot;优秀奖&quot;</span>,<span class="string">&quot;三等奖&quot;</span>,<span class="string">&quot;二等奖&quot;</span>,<span class="string">&quot;一等奖&quot;</span>,<span class="string">&quot;特等奖&quot;</span>]</span><br><span class="line">考核结果：[<span class="string">&quot;未参加考核&quot;</span>,<span class="string">&quot;不确定考核等级&quot;</span>,<span class="string">&quot;不合格&quot;</span>,<span class="string">&quot;基本合格&quot;</span>,<span class="string">&quot;合格&quot;</span>,<span class="string">&quot;良好&quot;</span>,<span class="string">&quot;优秀&quot;</span>]</span><br><span class="line">最高学历：[<span class="string">&quot;其他&quot;</span>,<span class="string">&quot;中等职业&quot;</span>,<span class="string">&quot;普通高中&quot;</span>,<span class="string">&quot;大学专科&quot;</span>,<span class="string">&quot;大学本科&quot;</span>,<span class="string">&quot;硕土研究生&quot;</span>,<span class="string">&quot;博士研究生&quot;</span>,<span class="string">&quot;全部&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="按出生日期逆序排序"><a href="#按出生日期逆序排序" class="headerlink" title="按出生日期逆序排序"></a>按出生日期逆序排序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df=df.sort_values(by=&#x27;出生日期&#x27;,ascending=False)</span><br></pre></td></tr></table></figure>

<h3 id="计算人数"><a href="#计算人数" class="headerlink" title="计算人数"></a>计算人数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算人数</span></span><br><span class="line">num=df_result[<span class="string">&quot;关联主键&quot;</span>].nunique()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;老师人数为：&quot;</span>,num,<span class="string">&quot;人&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="打印dataframe"><a href="#打印dataframe" class="headerlink" title="打印dataframe"></a>打印dataframe</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result_df = result_df.sort_values(by=[<span class="string">&quot;刊物级别&quot;</span>,<span class="string">&quot;参加工作时间&quot;</span>],ascending=[<span class="literal">False</span>,<span class="literal">False</span>])</span><br><span class="line"></span><br><span class="line">.reset_index(drop=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#[[&quot;教师姓名&quot;,&quot;作品名称&quot;,&quot;发表刊物&quot;,&quot;刊物级别&quot;,&quot;本人角色&quot;,&quot;发表年月&quot;]]</span></span><br></pre></td></tr></table></figure>



<h3 id="字典结果转化为dataframe"><a href="#字典结果转化为dataframe" class="headerlink" title="字典结果转化为dataframe:"></a>字典结果转化为dataframe:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果不是，请先创建这个 Series</span></span><br><span class="line"><span class="comment"># 创建 DataFrame</span></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;本人角色&#x27;</span>: Name.index, <span class="string">&#x27;人数&#x27;</span>: Name.values&#125;)</span><br><span class="line"><span class="comment"># 按人数降序排序</span></span><br><span class="line">df = df.sort_values(<span class="string">&#x27;人数&#x27;</span>, ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 重置索引</span></span><br><span class="line">df = df.reset_index(drop=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<h3 id="修改列名"><a href="#修改列名" class="headerlink" title="修改列名"></a>修改列名</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重命名列 &#x27;B&#x27; 为 &#x27;New_B&#x27;</span></span><br><span class="line">df = df.rename(columns=&#123;<span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;New_B&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="提取近5年的数据"><a href="#提取近5年的数据" class="headerlink" title="提取近5年的数据"></a>提取近5年的数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将&quot;获奖日期&quot;字段转换为datetime类型，并筛选出近5年的数据</span></span><br><span class="line">df_award[<span class="string">&#x27;获奖日期&#x27;</span>]=pd.to_datetime(df_award[<span class="string">&#x27;获奖日期&#x27;</span>],<span class="built_in">format</span>=<span class="string">&quot;%Y.%m.%d&quot;</span>)</span><br><span class="line">start_date = pd.to_datetime(<span class="string">&#x27;today&#x27;</span>).year -<span class="number">4</span></span><br><span class="line">df_award=df_award[df_award[<span class="string">&#x27;获奖日期&#x27;</span>].dt.year&gt;=start_date]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提取近5年的数据</span></span><br><span class="line">df_recent_5year = df_exchange[df_exchange[<span class="string">&#x27;年份&#x27;</span>]&gt;=pd.Timestamp.now().year-<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造一个新的数据表，对各年份的交流形式为城市学区交流轮岗的教师数量进行统计</span></span><br><span class="line">df_city_school = df_recent_5year[df_recent_5year[<span class="string">&#x27;交流形式&#x27;</span>]==<span class="string">&#x27;城区学区交流轮岗&#x27;</span>].groupby(<span class="string">&#x27;年份&#x27;</span>).size().reset_index()</span><br><span class="line">df_city_school.columns=[<span class="string">&#x27;年份&#x27;</span>,<span class="string">&#x27;城区学区交流轮岗数量&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造一个新的数据表，对各年份的所有教师交流轮岗数量进行统计</span></span><br><span class="line">df_total=dr_recent_5year.groupby(<span class="string">&#x27;年份&#x27;</span>).size().reset_index()</span><br><span class="line">df_total.columns=[<span class="string">&#x27;年份&#x27;</span>,<span class="string">&#x27;全部数量&#x27;</span></span><br><span class="line"><span class="comment">#按照年份将两个数据表进行合并</span></span><br><span class="line">df_merge=pd.merge (df_city_school,df_total,on=<span class="string">&#x27;年份&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#筛选近三年入校的老师</span></span><br><span class="line">three_years_ago=pd.to_datetime(<span class="string">&#x27;today&#x27;</span>)-pd.DateOffset(years=<span class="number">3</span>)</span><br><span class="line">new_teacher_df=teacher_df[teacher_df[<span class="string">&#x27;入校时间&#x27;</span>]&gt;three_years_ago]</span><br></pre></td></tr></table></figure>

<h3 id="我校今年新聘教师中，是否存在未获得教资证书的人"><a href="#我校今年新聘教师中，是否存在未获得教资证书的人" class="headerlink" title="我校今年新聘教师中，是否存在未获得教资证书的人"></a>我校今年新聘教师中，是否存在未获得教资证书的人</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">merged_df[<span class="string">&#x27;岗位聘任时间&#x27;</span>]=pd.to datetime(merged_df[<span class="string">&#x27;岗位聘任时间&#x27;</span>]，<span class="built_in">format</span>=<span class="string">&#x27;%Y.%m.%d&#x27;</span>)</span><br><span class="line">merged_df[<span class="string">&#x27;年份&#x27;</span>]=merged_df[<span class="string">&#x27;岗位聘任时间&#x27;</span>].dt.year</span><br><span class="line"></span><br><span class="line"><span class="comment">#筛选出今年新聘的教师</span></span><br><span class="line">this_year=merged_df[merged_df[<span class="string">&#x27;年份&#x27;</span>]==pd.to_datetime(<span class="string">&#x27;today&#x27;</span>).year]</span><br><span class="line"></span><br><span class="line"><span class="comment">#筛选出未获得教资证书的教师</span></span><br><span class="line">teachers_no_certificate=this_year[this_year[<span class="string">&#x27;教师资格证编号&#x27;</span>].isnull()]</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line">teachers_no_certificate=teachers_no_certificate.reset_index()</span><br><span class="line">teachers_no_certificate=teachers_no_certificate[<span class="string">&#x27;姓名&#x27;</span>，<span class="string">&#x27;岗位聘任时间&#x27;</span>，<span class="string">&#x27;教师资格证编号&#x27;</span>]</span><br><span class="line">teachers_no_certificate</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[<span class="string">&quot;教师姓名&quot;</span>,<span class="string">&quot;作品名称&quot;</span>,<span class="string">&quot;学校名称&quot;</span>,<span class="string">&quot;发表刊物&quot;</span>,<span class="string">&quot;刊物级别&quot;</span>,<span class="string">&quot;本人角色&quot;</span>]]</span><br></pre></td></tr></table></figure>

<h3 id="年龄"><a href="#年龄" class="headerlink" title="年龄"></a>年龄</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计算教师的年龄</span></span><br><span class="line">today = pd.to_datetime(<span class="string">&#x27;today&#x27;</span>,<span class="built_in">format</span>=<span class="string">&#x27;%Y.%m.%d&#x27;</span>)</span><br><span class="line">merge_df[<span class="string">&#x27;出生日期&#x27;</span>]=pd.to_datetime(merge_df[<span class="string">&#x27;出生日期&#x27;</span>],<span class="built_in">format</span>=<span class="string">&#x27;%Y.%m.%d&#x27;</span>)</span><br><span class="line">merge_df[<span class="string">&#x27;年龄&#x27;</span>]=today.year-merge_df[<span class="string">&#x27;出生日期&#x27;</span>].dt.year</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取每个人的年龄</span></span><br><span class="line">df[<span class="string">&#x27;出生日期&#x27;</span>]=pd.to_datetime(df[<span class="string">&#x27;出生日期&#x27;</span>])</span><br><span class="line">df[<span class="string">&#x27;年龄&#x27;</span>]=(pd.to_datetime(<span class="string">&quot;today&quot;</span>)-df[<span class="string">&#x27;出生日期&#x27;</span>])//pd.Timedelta(days=<span class="number">365</span>)</span><br><span class="line">df[<span class="string">&#x27;距退休年数&quot;]=60-df[&#x27;</span>年龄<span class="string">&#x27;]</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">#筛选出年龄小于35岁的教师</span></span><br><span class="line"><span class="string">merge_df = merge_df[merge_df[&#x27;</span>年龄<span class="string">&#x27;]&lt;35]</span></span><br></pre></td></tr></table></figure>

<h3 id="年龄分布"><a href="#年龄分布" class="headerlink" title="年龄分布"></a>年龄分布</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age_ranges = [<span class="number">24</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">60</span>, <span class="number">65</span>]</span><br><span class="line">labels = [<span class="string">&#x27;24岁以下&#x27;</span>, <span class="string">&#x27;25-29岁&#x27;</span>, <span class="string">&#x27;30-34岁&#x27;</span>, <span class="string">&#x27;35-39岁&#x27;</span>, <span class="string">&#x27;40-44岁&#x27;</span>, <span class="string">&#x27;45-49岁&#x27;</span>, <span class="string">&#x27;50-54岁&#x27;</span>, <span class="string">&#x27;55-59岁&#x27;</span>, <span class="string">&#x27;60岁以上&#x27;</span>]</span><br></pre></td></tr></table></figure>



<h3 id="学科竞赛"><a href="#学科竞赛" class="headerlink" title="学科竞赛"></a>学科竞赛</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;学科奥林匹克竞赛&#x27;</span>,<span class="string">&#x27;自然科学素养类(部级官方赛事)&#x27;</span>,<span class="string">&#x27;自然科学素养类(其他级别比赛)&#x27;</span>,<span class="string">&#x27;人文综合素养类(部级官方赛事)&#x27;</span>,<span class="string">&#x27;人文综合素养类(其他级别比赛)&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="近一年"><a href="#近一年" class="headerlink" title="近一年:"></a>近一年:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取近一年发表论文的时间范围</span></span><br><span class="line">paper_df[<span class="string">&quot;发表年月&quot;</span>] = pd.to_datetime(paper_df[<span class="string">&quot;发表年月&quot;</span>])</span><br><span class="line">start_date = pd.to_datetime(<span class="string">&quot;today&quot;</span>) - pd.DateOffset(years=<span class="number">1</span>)</span><br><span class="line">recent_papers = paper_df[paper_df[<span class="string">&quot;发表年月&quot;</span>] &gt;=start_date]</span><br></pre></td></tr></table></figure>

<h3 id="输出最大值"><a href="#输出最大值" class="headerlink" title="输出最大值"></a>输出最大值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出最后的结论</span></span><br><span class="line">top_subject = df.iloc[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;论文成果最多的学科是<span class="subst">&#123;top_subject[<span class="string">&#x27;主授学科&#x27;</span>]&#125;</span>，共有<span class="subst">&#123;top_subject[<span class="string">&#x27;论文数量&#x27;</span>]&#125;</span>篇论文。&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取基本信息表、集体备课表</span></span><br><span class="line">basic_info_df = all_dataframe_dict[<span class="string">&#x27;基本信息&#x27;</span>].copy()</span><br><span class="line">group_lesson_df = all_dataframe_dict[<span class="string">&#x27;集体备课&#x27;</span>].copy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并基本信息表和集体备课表</span></span><br><span class="line">merged_df = pd.merge(basic_info_df, group_lesson_df, on=<span class="string">&quot;关联主键&quot;</span>, how=<span class="string">&quot;inner&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义年级顺序</span></span><br><span class="line">grade_order = [<span class="string">&#x27;小班&#x27;</span>, <span class="string">&#x27;中班&#x27;</span>, <span class="string">&#x27;大班&#x27;</span>, <span class="string">&#x27;托班&#x27;</span>, <span class="string">&#x27;小小班&#x27;</span>, <span class="string">&#x27;一年级&#x27;</span>, <span class="string">&#x27;二年级&#x27;</span>, <span class="string">&#x27;三年级&#x27;</span>, <span class="string">&#x27;四年级&#x27;</span>, ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将执教年级转为分类型变量并指定排序顺序</span></span><br><span class="line">merged_df[<span class="string">&#x27;执教年级&#x27;</span>] = pd.Categorical(merged_df[<span class="string">&#x27;执教年级&#x27;</span>], categories=grade_order, ordered=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对执教年级和教师姓名进行统计</span></span><br><span class="line">grade_teacher_count = merged_df.groupby(<span class="string">&#x27;执教年级&#x27;</span>)[<span class="string">&#x27;关联主键&#x27;</span>].nunique().reset_index()</span><br><span class="line">grade_teacher_count.columns = [<span class="string">&#x27;执教年级&#x27;</span>, <span class="string">&#x27;人数&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照预定义的年级顺序进行排序</span></span><br><span class="line">grade_teacher_count = grade_teacher_count.sort_values(<span class="string">&#x27;执教年级&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制柱状图进行可视化</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">sns.barplot(data=grade_teacher_count, x=<span class="string">&#x27;执教年级&#x27;</span>, y=<span class="string">&#x27;人数&#x27;</span>, color=<span class="string">&quot;skyblue&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;不同年级进行集体备课的老师数量统计&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;年级&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;教师数量&quot;</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">max_group_lesson_grade = grade_teacher_count.iloc[grade_teacher_count[<span class="string">&#x27;人数&#x27;</span>].idxmax()]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;进行集体备课的老师最多的年级是<span class="subst">&#123;max_group_lesson_grade[<span class="string">&#x27;执教年级&#x27;</span>]&#125;</span>, 共有<span class="subst">&#123;max_group_lesson_grade[<span class="string">&#x27;人数&#x27;</span>]&#125;</span>人&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接输出按年级顺序排序的DataFrame</span></span><br><span class="line">grade_teacher_count</span><br></pre></td></tr></table></figure>

<h3 id="打印top3"><a href="#打印top3" class="headerlink" title="打印top3"></a>打印top3</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 合并数据表，包括教师姓名，并只保留一条记录</span></span><br><span class="line">result_df = pd.merge(awards_df[[<span class="string">&#x27;天联主键&#x27;</span>, <span class="string">&#x27;姓名&#x27;</span>]], top_3_teachers_df, on=<span class="string">&#x27;天联主键&#x27;</span>, how=<span class="string">&#x27;inner&#x27;</span>).drop_duplicates(subset=[<span class="string">&#x27;天联主键&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按荣誉次数降序排序</span></span><br><span class="line">result_df = result_df.sort_values(<span class="string">&#x27;荣誉次数&#x27;</span>, ascending=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印这三位教师的姓名和荣誉次数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;荣誉次数最多的三位教师：&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> index, row <span class="keyword">in</span> result_df.iterrows():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;姓名: <span class="subst">&#123;row[<span class="string">&#x27;姓名&#x27;</span>]&#125;</span>, 荣誉次数: <span class="subst">&#123;row[<span class="string">&#x27;荣誉次数&#x27;</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>





<h2 id="犯过的错误："><a href="#犯过的错误：" class="headerlink" title="犯过的错误："></a>犯过的错误：</h2><ul>
<li><p>query中涉及本人奖项级别的，记得勾上“<strong>查询教师个人奖项级别分布</strong>”;</p>
</li>
<li><p>查看知识元的语义顺序是否有漏选；</p>
</li>
<li><p>筛选后连接表要用inner；</p>
</li>
<li><p>改代码的时候记得注释也要看一下，别忘了<strong>改注释</strong>；</p>
</li>
<li><p>注意<strong>rotation</strong>什么时候用，什么时候改为90，以及figure<strong>（10，6）</strong>；</p>
</li>
<li><p>&#x3D;还是&gt;,看清楚题目；</p>
</li>
<li><p>涉及到教师名单的，求“哪些教师”等的query,记得<strong>print一下人数</strong>；</p>
</li>
<li><p>注意关联树的字段与输出表格是否一致（常见遗漏：姓名，性别）；</p>
</li>
<li><p>“有哪些老师有过以第一作者身份在国家级期刊上发表论文的记录”，在这个query中，“<strong>国家级期刊”</strong>：既要筛选刊物级别：国家级普刊，也要筛选发表刊物为：期刊刊物；<br>query中出现“第一作者”，不需要筛选“一作”这个知识元；</p>
</li>
<li><p>统计人数用nunique();</p>
</li>
<li><p>注意字符串筛选规范，什么时候用“&#x3D;&#x3D;”，什么时候用“str.contains”;</p>
</li>
<li><p>涉及教师的学科分布记得用“<strong>主授学科</strong>”</p>
</li>
</ul>
<h2 id="知识元的作用是用来澄清概念的；"><a href="#知识元的作用是用来澄清概念的；" class="headerlink" title="知识元的作用是用来澄清概念的；"></a>知识元的作用是用来澄清概念的；</h2><h3 id="query：请帮我筛选出所有5年内校外合作果题名称；这里的五年内再加上一个"><a href="#query：请帮我筛选出所有5年内校外合作果题名称；这里的五年内再加上一个" class="headerlink" title="query：请帮我筛选出所有5年内校外合作果题名称；这里的五年内再加上一个&lt;&#x3D;today（如果问近n年也是一样）"></a>query：请帮我筛选出所有5年内校外合作果题名称；这里的五年内再加上一个&lt;&#x3D;today（如果问近n年也是一样）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将完成时间转换为日期格式</span></span><br><span class="line">df_course_research[<span class="string">&quot;完成时间&quot;</span>] = pd.to_datetime(df_course_research[<span class="string">&quot;完成时间&quot;</span>],<span class="built_in">format</span>=<span class="string">&#x27;%Y.%m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#筛选最近5年的数据</span></span><br><span class="line">start_date = pd.to_datetime(<span class="string">&#x27;today&#x27;</span>).year -<span class="number">4</span></span><br><span class="line">df_course_research = df_course_research[(df_course_research[<span class="string">&#x27;完成时间&#x27;</span>].dt.year&gt;=start_date) &amp; (df_course_research[<span class="string">&#x27;完成时间&#x27;</span>]=pd.to_datetime(<span class="string">&#x27;today&#x27;</span>))]</span><br></pre></td></tr></table></figure>



<h3 id="用value-counts统计："><a href="#用value-counts统计：" class="headerlink" title="用value_counts统计："></a>用value_counts统计：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 用groupby统计：</span></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="图形的横坐标顺序和表格的横坐标顺序输出不一致："><a href="#图形的横坐标顺序和表格的横坐标顺序输出不一致：" class="headerlink" title="图形的横坐标顺序和表格的横坐标顺序输出不一致："></a>图形的横坐标顺序和表格的横坐标顺序输出不一致：</h3><h1 id="典型例题"><a href="#典型例题" class="headerlink" title="典型例题"></a>典型例题</h1><h2 id="2019年获得市级及以上特等奖本人奖项的教师有哪些"><a href="#2019年获得市级及以上特等奖本人奖项的教师有哪些" class="headerlink" title="2019年获得市级及以上特等奖本人奖项的教师有哪些"></a>2019年获得市级及以上特等奖本人奖项的教师有哪些</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关联字段：查询教师个人奖项级别分布</span><br><span class="line">知识元：本人奖项&gt;奖项级别&gt;语义顺序</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从all_dataframe_dict中取出&quot;本人奖项”表</span></span><br><span class="line">award_df=all_dataframe_dict[<span class="string">&quot;本人奖项&quot;</span>].copy()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义奖项级别的排序顺序</span></span><br><span class="line">ort_order=[<span class="string">&quot;校级&quot;</span>,<span class="string">&quot;集团（学区）&quot;</span>,<span class="string">&quot;乡镇级&quot;</span>,<span class="string">&quot;区县级&quot;</span>,<span class="string">&quot;市级&quot;</span>,<span class="string">&quot;省级&quot;</span>,<span class="string">&quot;国家级&quot;</span>,<span class="string">&quot;全部&quot;</span>]</span><br><span class="line">award_df[<span class="string">&#x27;奖顶级别&#x27;</span>]=pd.Categorical(award_df[<span class="string">&#x27;奖项级别&#x27;</span>],categories=sort_order,ordered=<span class="literal">True</span>)</span><br><span class="line">           </span><br><span class="line"><span class="comment">#将获奖日期改为日期格式</span></span><br><span class="line">award_df[<span class="string">&#x27;获奖日期&#x27;</span>]=pd.to_datetime(award_df[<span class="string">&#x27;获奖日期&#x27;</span>])</span><br><span class="line">           </span><br><span class="line"><span class="comment">#筛选出2019年获得市级及以上特等奖的教师</span></span><br><span class="line">selected_df = award_df[(award_df[<span class="string">&quot;获奖日期&quot;</span>].dt.year=<span class="number">2019</span>)&amp;</span><br><span class="line">                       (award_df[<span class="string">&quot;奖项级别&quot;</span>]&gt;=<span class="string">&quot;市级&quot;</span>)&amp;</span><br><span class="line">                       (award_df[<span class="string">&quot;奖项等级&quot;</span>]=<span class="string">&quot;特等奖“)]</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">#计算人数</span></span><br><span class="line"><span class="string">num=selected_df[&quot;</span>关联主键<span class="string">&quot;].nunique()</span></span><br><span class="line"><span class="string">print(&quot;</span><span class="number">2019</span>年获得市级及以上特等奖本人奖项的教师人数为：<span class="string">&quot;,num,&quot;</span>人<span class="string">&quot;)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">#打印结果</span></span><br><span class="line"><span class="string">elected_df=selected_df.sort_values(&quot;</span>奖项级别<span class="string">&quot;)</span></span><br><span class="line"><span class="string">elected_df[[&quot;</span>教师姓名<span class="string">&quot;,&quot;</span>奖项名称<span class="string">&quot;,&quot;</span>奖项类别<span class="string">&quot;,&quot;</span>奖项级别<span class="string">&quot;,&quot;</span>奖项等级<span class="string">&quot;,&quot;</span>获奖日期<span class="string">&quot;].reset_index(drop=True)</span></span><br></pre></td></tr></table></figure>



<h2 id="查询2012年以来我校教师在省部级及以上”论坛刊物”上发表过的文章名称"><a href="#查询2012年以来我校教师在省部级及以上”论坛刊物”上发表过的文章名称" class="headerlink" title="查询2012年以来我校教师在省部级及以上”论坛刊物”上发表过的文章名称"></a>查询2012年以来我校教师在省部级及以上”论坛刊物”上发表过的文章名称</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关联字段：查询科研成果级别</span><br><span class="line">知识元：论文发表刊物级别&gt;&gt;语义顺序</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从all_dataframe_dict中提取&quot;论文发表”数据表</span></span><br><span class="line">paper_publish_df = all_dataframe_dict[<span class="string">&quot;论文发表&quot;</span>].copy()</span><br><span class="line"></span><br><span class="line"><span class="comment">#对时间字段进行筛选，获取2012年以来的数据</span></span><br><span class="line">paper_publish_df[<span class="string">&quot;发表年月&quot;</span>]=pd.to_datetime(paper_publish_df[<span class="string">&quot;发表年月“],format=&quot;</span>%Y.%m<span class="string">&quot;)</span></span><br><span class="line"><span class="string">paper_publish_df=paper_publish_df[paper_publish_df[&quot;</span>发表年月<span class="string">&quot;].dt.year&gt;=2012]</span></span><br><span class="line"><span class="string">                                                         </span></span><br><span class="line"><span class="string">#定义刊物级别的排序顺序</span></span><br><span class="line"><span class="string">sort_ordr=[&#x27;其他&#x27;,&#x27;校级普刊&#x27;,&#x27;学区级普刊&#x27;,&#x27;区级普刊&#x27;,&#x27;市级普刊&#x27;,&#x27;省部级普刊&#x27;,&#x27;国家级普刊&#x27;,&#x27;核心期刊&#x27;]</span></span><br><span class="line"><span class="string">paper_publish_df=paper_publish_df.copy()</span></span><br><span class="line"><span class="string">paper_publish_df[&quot;</span>刊物级别<span class="string">&quot;] = pd.Categorical(paper_publish_df[&quot;</span>刊物级     别<span class="string">&quot;],categories=sort_order,ordered=True)</span></span><br><span class="line"><span class="string">                                                         </span></span><br><span class="line"><span class="string">#筛选出省级及以上论坛刊物</span></span><br><span class="line"><span class="string">result_df=paper_publish_df[(paper_publish_df[&quot;</span>刊物级别<span class="string">&quot;]&gt;=&quot;</span>省部级普刊<span class="string">&quot;) &amp;</span></span><br><span class="line"><span class="string">(paper_publish_df[&quot;</span>发表刊物<span class="string">&quot;]==&quot;</span>论坛刊物<span class="string">&quot;)]</span></span><br><span class="line"><span class="string">                                                         </span></span><br><span class="line"><span class="string">#展示数据，使用富文本展示</span></span><br><span class="line"><span class="string">print(&quot;</span><span class="number">2012</span>年以来我校教师在省部级及以上论坛刊物上发表过的文章名称有:<span class="string">&quot;,len(result_df),&quot;</span>个<span class="string">&quot;)</span></span><br><span class="line"><span class="string">result_df=result_df.sort_values(&quot;</span>刊物级别<span class="string">&quot;)</span></span><br><span class="line"><span class="string">result_df.reset_index(drop=True)[&quot;</span>教师姓名<span class="string">&quot;,&quot;</span>作品名称<span class="string">&quot;,&quot;</span>发表年月<span class="string">&quot;,&quot;</span>发表刊物<span class="string">&quot;,&quot;</span>刊物级别<span class="string">&quot;,&quot;</span>本人角色<span class="string">&quot;]                                                         </span></span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>实习</tag>
      </tags>
  </entry>
  <entry>
    <title>大模型基础认识</title>
    <url>/2024/11/19/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%86/</url>
    <content><![CDATA[<p>什么是大模型，什么是RAG，什么是提示词，常见的开源大模型的区别，常见的文生图工具</p>
<hr>
<ol>
<li><strong>GPT</strong>: Generative Pretrained Transformer（生成式 预训练的 Transformer），</li>
</ol>
<p>在transformer之前，语言模型的主流架构是RNN（循环神经网络），但是rnn不能并行处理，只能按顺序处理，并且难以有效的捕捉长距离的语义关系，lstm是rnn的改良，但是当距离过长的时候，也依然受到限制；而transformer能学习输入序里所有词的相关性和上下文，不会受到短时记忆的影响，这得益于<strong>transformer</strong>的<strong>自注意力机制</strong> ：</p>
<p>transformer在处理每个词的时候，不仅会注意这个词本身，以及它附近的词，还会去注意输入序列里所有其他的词，然后给予每个词不一样的注意力权重，权重是模型在训练过程中通过大量文本逐渐习得的</p>
<p>大语言模型，首先需要大量文本进行无监督学习，大语言模型的<strong>大</strong>，不仅是训练数据巨大，而且参数数量也是巨大的，因此transformer知道当前词和其它词的相关性有多强，然后专注于输入里真正重要的部分，即时两个词的位置隔的很远，transformer也可以捕捉到它们之间的依赖关系；</p>
<p>transformer在把词输入给神经网络之前，除了会先对词进行嵌入，转换成<strong>词向量</strong>，也就是把词各用一串数字表示，还会把每个词在句子中的位置也用向量表示，即<strong>位置向量</strong>，然后把它们添加到输入序列的表示当中，然后把这个结果给神经网络，于是模型既可以理解每个词的意义，又能够捕获词在句子中的位置，从而理解不同词之间的顺序关系，借助位置编码，词可以不按顺序输入给transformer，模型可以同时处理输入序列里的所有位置，而不需要向rnn那样依次处理，在计算时，每个输出都可以独立计算，不需要等待其他位置的计算结果，从而大大提高了训练速度。</p>
<ol start="2">
<li><strong>AIGC</strong>：(AI Generated Content) ai生成内容：</li>
</ol>
<p>如文本、代码、图片、音频、视频</p>
<ol>
<li>什么是大模型（Large Language Models, LLMs）</li>
</ol>
<ul>
<li><p>定义：大规模语言模型是一种基于<strong>深度学习</strong>的AI系统，通过海量文本数据训练而成</p>
</li>
<li><p>特点：</p>
<ul>
<li>具有理解和生成人类语言的能力</li>
<li>参数量巨大（通常在数十亿到数万亿不等）</li>
<li>可以完成多种任务：对话、写作、代码生成、翻译等</li>
</ul>
</li>
<li><p>工作原理：基于<strong>Transformer架构</strong>，使用自注意力机制处理输入信息</p>
<hr>
</li>
</ul>
<ol start="3">
<li><strong>提示词工程</strong>：就是调教ai，研究如何提高和AI的沟通质量和效率，让它给我们想要的结果</li>
</ol>
<p>方法：</p>
<ul>
<li>小样本提示，用样本进行引导</li>
<li>借助思维链：在给ai的小样本里，不仅包含正确的结果，还包含具体的推理步骤</li>
<li>分步骤思考</li>
</ul>
<hr>
<ol start="4">
<li><strong>什么是RAG</strong>（Retrieval-Augmented Generation）</li>
</ol>
<p>让模型访问外部知识库，获得实时且正确的数据，生成更可靠和准确的回答，这种架构叫做RAG</p>
<ul>
<li>定义：检索增强生成，是一种将信息检索与语言生成相结合的技术</li>
<li>工作流程：<ol>
<li>将知识库文档拆分并建立向量索引</li>
<li>收到用户查询后检索相关文档</li>
<li>将检索到的信息作为上下文提供给大模型</li>
<li>大模型基于上下文生成回答</li>
</ol>
</li>
</ul>
<p>rag有利于搭建企业知识库和个人知识库</p>
<ul>
<li>优势：<ul>
<li>提高回答准确性</li>
<li>可以处理最新信息</li>
<li>降低幻觉问题</li>
<li>支持私有领域知识</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>大模型</tag>
      </tags>
  </entry>
  <entry>
    <title>python编程基础复习</title>
    <url>/2024/11/28/01_Python%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>Jupyter命令模式快捷键：</p>
<ul>
<li>dd：删除选中的单元格</li>
<li>a：在选中的单元格上方加入一个空白单元格</li>
<li>b：在选中的单元格下方加入一个空白单元格</li>
<li>m：将选中的单元格转化为Markdown格式</li>
<li>y：将选中的单元格转化为代码格式</li>
</ul>
<h1 id="Python输出"><a href="#Python输出" class="headerlink" title="Python输出"></a>Python输出</h1><h2 id="Python普通输出"><a href="#Python普通输出" class="headerlink" title="Python普通输出"></a>Python普通输出</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>hello world!
</code></pre>
<h2 id="Python格式化输出"><a href="#Python格式化输出" class="headerlink" title="Python格式化输出"></a>Python格式化输出</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-进行格式化输出"><a href="#使用-进行格式化输出" class="headerlink" title="使用%进行格式化输出"></a>使用%进行格式化输出</h3><ul>
<li>整数：%d</li>
<li>浮点数：%f</li>
<li>字符串：%s</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出a+b的和是？？</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d+%d=%d&#x27;</span> % (a, b, a+b))</span><br></pre></td></tr></table></figure>

<pre><code>2+3=5
</code></pre>
<h3 id="使用format方法进行格式化输出"><a href="#使用format方法进行格式化输出" class="headerlink" title="使用format方法进行格式化输出"></a>使用format方法进行格式化输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;+&#123;&#125;=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(a, b, a+b))</span><br></pre></td></tr></table></figure>

<pre><code>2+3=5
</code></pre>
<h3 id="使用f’’进行格式化输出"><a href="#使用f’’进行格式化输出" class="headerlink" title="使用f’’进行格式化输出"></a>使用f’’进行格式化输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;a&#125;</span>+<span class="subst">&#123;b&#125;</span>=<span class="subst">&#123;a+b&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>2+3=5
</code></pre>
<h1 id="常用的字符串操作"><a href="#常用的字符串操作" class="headerlink" title="常用的字符串操作"></a>常用的字符串操作</h1><h2 id="定义字符串"><a href="#定义字符串" class="headerlink" title="定义字符串"></a>定义字符串</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用单双引号进行定义</span></span><br><span class="line">a = <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line">b = <span class="string">&quot;hello world!&quot;</span></span><br><span class="line">c = <span class="string">&quot;&quot;&quot;hello world!&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(a == b)  </span><br><span class="line"><span class="built_in">print</span>(a == c)  <span class="comment"># 说明在Python中用单引号、双引号和单行的三引号定义的字符串没有任何区别</span></span><br></pre></td></tr></table></figure>

<pre><code>True
True
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用三引号定义具有换行符的字符串</span></span><br><span class="line">d = <span class="string">&quot;&quot;&quot;hello </span></span><br><span class="line"><span class="string">world!&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure>

<pre><code>hello 
world!
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(a == d)  <span class="comment"># 具有换行符的字符串和原始的字符串就不相等了</span></span><br></pre></td></tr></table></figure>

<pre><code>False
</code></pre>
<h2 id="字符串的索引和切片"><a href="#字符串的索引和切片" class="headerlink" title="字符串的索引和切片"></a>字符串的索引和切片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;Hi, world!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str1)</span><br></pre></td></tr></table></figure>

<pre><code>Hi, world!
</code></pre>
<h3 id="索引（取出指定的字符）"><a href="#索引（取出指定的字符）" class="headerlink" title="索引（取出指定的字符）"></a>索引（取出指定的字符）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取出，</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">2</span>])  <span class="comment"># 正向索引</span></span><br><span class="line"><span class="built_in">print</span>(str1[-<span class="number">8</span>])</span><br></pre></td></tr></table></figure>

<pre><code>,
,
</code></pre>
<h3 id="切片（取出指定的一块字符）"><a href="#切片（取出指定的一块字符）" class="headerlink" title="切片（取出指定的一块字符）"></a>切片（取出指定的一块字符）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取出world</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">4</span>:<span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">4</span>:-<span class="number">1</span>])  <span class="comment"># 正向索引和反向索引可以混合使用</span></span><br></pre></td></tr></table></figure>

<pre><code>world
world
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取出hi</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(str1[:<span class="number">2</span>])  <span class="comment"># 当切片时，是从第一个元素开始取值的时候，初始下标可以省略</span></span><br></pre></td></tr></table></figure>

<pre><code>Hi
Hi
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取出world!</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">4</span>:<span class="number">10</span>])</span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">4</span>:])  <span class="comment"># 当切片时，如果一直需要取到最后一个元素时，结束下标可以省略</span></span><br></pre></td></tr></table></figure>

<pre><code>world!
world!
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取出整个字符串</span></span><br><span class="line"><span class="built_in">print</span>(str1)</span><br><span class="line"><span class="built_in">print</span>(str1[:])  <span class="comment"># 省略开始和结束下标</span></span><br></pre></td></tr></table></figure>

<pre><code>Hi, world!
Hi, world!
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取出奇数项字符</span></span><br><span class="line"><span class="built_in">print</span>(str1[::<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<pre><code>H,wrd
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取出偶数项字符</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">1</span>::<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<pre><code>i ol!
</code></pre>
<h2 id="字符串的特殊函数"><a href="#字符串的特殊函数" class="headerlink" title="字符串的特殊函数"></a>字符串的特殊函数</h2><h3 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将两个字符串进行合并</span></span><br><span class="line">a + str1</span><br></pre></td></tr></table></figure>




<pre><code>&#39;hello world!Hi, world!&#39;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将某个字符串重复n次</span></span><br><span class="line">str1 * <span class="number">3</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;Hi, world!Hi, world!Hi, world!&#39;
</code></pre>
<h3 id="字符串的替换"><a href="#字符串的替换" class="headerlink" title="字符串的替换"></a>字符串的替换</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将str1中的Hi换乘hello</span></span><br><span class="line">str1 = str1.replace(<span class="string">&#x27;Hi&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(str1)</span><br></pre></td></tr></table></figure>

<pre><code>hello, world!
</code></pre>
<h3 id="字符串的切分"><a href="#字符串的切分" class="headerlink" title="字符串的切分"></a>字符串的切分</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按照，切分字符串</span></span><br><span class="line">str1.split(<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;hello&#39;, &#39; world!&#39;]
</code></pre>
<h3 id="删除字符串前后的指定字符"><a href="#删除字符串前后的指定字符" class="headerlink" title="删除字符串前后的指定字符"></a>删除字符串前后的指定字符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str2 = <span class="string">&#x27;!!你好，!!世界!!!&#x27;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str2.strip(<span class="string">&#x27;!&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;你好，!!世界&#39;
</code></pre>
<h3 id="删除字符串中所有的某个字符"><a href="#删除字符串中所有的某个字符" class="headerlink" title="删除字符串中所有的某个字符"></a>删除字符串中所有的某个字符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str2.replace(<span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;你好，世界&#39;
</code></pre>
<h1 id="常用的列表操作"><a href="#常用的列表操作" class="headerlink" title="常用的列表操作"></a>常用的列表操作</h1><h2 id="定义一个列表"><a href="#定义一个列表" class="headerlink" title="定义一个列表"></a>定义一个列表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="literal">True</span>, <span class="string">&#x27;ABC&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure>

<pre><code>[1, 2, 3, 4, True, &#39;ABC&#39;]
</code></pre>
<h2 id="列表的索引和切片"><a href="#列表的索引和切片" class="headerlink" title="列表的索引和切片"></a>列表的索引和切片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取出True</span></span><br><span class="line">list1[-<span class="number">2</span>]</span><br></pre></td></tr></table></figure>




<pre><code>True
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取出2,3,4,True</span></span><br><span class="line">list1[<span class="number">1</span>:-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>




<pre><code>[2, 3, 4, True]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取出列表的奇数项</span></span><br><span class="line">list1[::<span class="number">2</span>]</span><br></pre></td></tr></table></figure>




<pre><code>[1, 3, True]
</code></pre>
<h2 id="列表中常用的函数和操作"><a href="#列表中常用的函数和操作" class="headerlink" title="列表中常用的函数和操作"></a>列表中常用的函数和操作</h2><h3 id="列表的增删改查"><a href="#列表的增删改查" class="headerlink" title="列表的增删改查"></a>列表的增删改查</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在列表的指定位置增加某一个元素值</span></span><br><span class="line"><span class="comment"># 在2和3之间增加一个&#x27;insert&#x27;字符串</span></span><br><span class="line">list1.insert(<span class="number">2</span>, <span class="string">&#x27;insert&#x27;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, &#39;insert&#39;, 3, 4, True, &#39;ABC&#39;]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在列表末尾追加单个元素</span></span><br><span class="line"><span class="comment"># 在列表末尾加上一个&#x27;end&#x27;</span></span><br><span class="line">list1.append(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">list1</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, &#39;insert&#39;, 3, 4, True, &#39;ABC&#39;, &#39;end&#39;]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在列表末尾追加多个元素</span></span><br><span class="line"><span class="comment"># 在列表末尾追加 201, 202, 203</span></span><br><span class="line">list1.extend([<span class="number">201</span>, <span class="number">202</span>, <span class="number">203</span>])</span><br><span class="line">list1</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, &#39;insert&#39;, 3, 4, True, &#39;ABC&#39;, &#39;end&#39;, 201, 202, 203]
</code></pre>
<h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按照值进行删除</span></span><br><span class="line"><span class="comment"># 删除&#x27;ABC&#x27;</span></span><br><span class="line">list1.remove(<span class="string">&#x27;ABC&#x27;</span>)</span><br><span class="line">list1</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, &#39;insert&#39;, 3, 4, True, &#39;end&#39;, 201, 202, 203]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按照下标位置进行删除</span></span><br><span class="line"><span class="comment"># 删除下标为2所在的元素</span></span><br><span class="line">list1.pop(<span class="number">2</span>)</span><br><span class="line">list1</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, 3, 4, True, &#39;end&#39;, 201, 202, 203]
</code></pre>
<h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把True修改为False</span></span><br><span class="line">list1[<span class="number">4</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, 3, 4, False, &#39;end&#39;, 201, 202, 203]
</code></pre>
<h1 id="常用的字典操作"><a href="#常用的字典操作" class="headerlink" title="常用的字典操作"></a>常用的字典操作</h1><h2 id="定义一个字典"><a href="#定义一个字典" class="headerlink" title="定义一个字典"></a>定义一个字典</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tony&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Students&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="利用字典进行取值"><a href="#利用字典进行取值" class="headerlink" title="利用字典进行取值"></a>利用字典进行取值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1[<span class="string">&#x27;name&#x27;</span>]</span><br></pre></td></tr></table></figure>




<pre><code>&#39;Tony&#39;
</code></pre>
<h2 id="字典的增删改查"><a href="#字典的增删改查" class="headerlink" title="字典的增删改查"></a>字典的增删改查</h2><h3 id="增-1"><a href="#增-1" class="headerlink" title="增"></a>增</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1[<span class="string">&#x27;sex&#x27;</span>] = <span class="string">&#x27;男&#x27;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;name&#39;: &#39;Tony&#39;, &#39;job&#39;: &#39;Students&#39;, &#39;sex&#39;: &#39;男&#39;&#125;
</code></pre>
<h3 id="删-1"><a href="#删-1" class="headerlink" title="删"></a>删</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1.pop(<span class="string">&#x27;sex&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;男&#39;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;name&#39;: &#39;Tony&#39;, &#39;job&#39;: &#39;Students&#39;&#125;
</code></pre>
<h3 id="改-1"><a href="#改-1" class="headerlink" title="改"></a>改</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1[<span class="string">&#x27;job&#x27;</span>] = <span class="string">&#x27;Teachers&#x27;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;name&#39;: &#39;Tony&#39;, &#39;job&#39;: &#39;Teachers&#39;&#125;
</code></pre>
<h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h2><h3 id="查看所有的键名称"><a href="#查看所有的键名称" class="headerlink" title="查看所有的键名称"></a>查看所有的键名称</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1.keys()</span><br></pre></td></tr></table></figure>




<pre><code>dict_keys([&#39;name&#39;, &#39;job&#39;])
</code></pre>
<h3 id="查看所有的值"><a href="#查看所有的值" class="headerlink" title="查看所有的值"></a>查看所有的值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1.values()</span><br></pre></td></tr></table></figure>




<pre><code>dict_values([&#39;Tony&#39;, &#39;Teachers&#39;])
</code></pre>
<h3 id="查看所有的键值对"><a href="#查看所有的键值对" class="headerlink" title="查看所有的键值对"></a>查看所有的键值对</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1.items()</span><br></pre></td></tr></table></figure>




<pre><code>dict_items([(&#39;name&#39;, &#39;Tony&#39;), (&#39;job&#39;, &#39;Teachers&#39;)])
</code></pre>
<h1 id="Python中的循环"><a href="#Python中的循环" class="headerlink" title="Python中的循环"></a>Python中的循环</h1><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出1-10这10个数的平方</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    <span class="built_in">print</span>(i ** <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<pre><code>1
--------------------------------------------------
4
--------------------------------------------------
9
--------------------------------------------------
16
--------------------------------------------------
25
--------------------------------------------------
36
--------------------------------------------------
49
--------------------------------------------------
64
--------------------------------------------------
81
--------------------------------------------------
100
--------------------------------------------------
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<pre><code>1
2
3
4
False
end
201
202
203
</code></pre>
<h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">50</span></span><br><span class="line"><span class="keyword">while</span> n &gt;= <span class="number">25</span>:</span><br><span class="line">    <span class="built_in">print</span>(n ** <span class="number">2</span>)</span><br><span class="line">    n -= <span class="number">1</span></span><br></pre></td></tr></table></figure>

<pre><code>2500
2401
2304
2209
2116
2025
1936
1849
1764
1681
1600
1521
1444
1369
1296
1225
1156
1089
1024
961
900
841
784
729
676
625
</code></pre>
<h1 id="Python中的分支结构"><a href="#Python中的分支结构" class="headerlink" title="Python中的分支结构"></a>Python中的分支结构</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单分支</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(i) == <span class="built_in">int</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<pre><code>1
2
3
4
201
202
203
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 双分支</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(i) == <span class="built_in">int</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<pre><code>1
2
3
4
0
0
201
202
203
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多分支</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(i) == <span class="built_in">int</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">type</span>(i) == <span class="built_in">bool</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<pre><code>1
2
3
4
False
0
201
202
203
</code></pre>
<h1 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例子：已知现在有一个列表，列表中的元素为1-20.现在要获得一个  所有元素+1  然后取平方构成  的列表</span></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line">    res.append((i + <span class="number">1</span>) ** <span class="number">2</span>)</span><br><span class="line">res</span><br></pre></td></tr></table></figure>




<pre><code>[4,
 9,
 16,
 25,
 36,
 49,
 64,
 81,
 100,
 121,
 144,
 169,
 196,
 225,
 256,
 289,
 324,
 361,
 400,
 441]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用列表推导式改写</span></span><br><span class="line">res = [(i + <span class="number">1</span>) ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>)]</span><br><span class="line">res</span><br></pre></td></tr></table></figure>




<pre><code>[4,
 9,
 16,
 25,
 36,
 49,
 64,
 81,
 100,
 121,
 144,
 169,
 196,
 225,
 256,
 289,
 324,
 361,
 400,
 441]
</code></pre>
<h1 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 能够对列表中的元素进行筛选，将所有的整数值筛选出来</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_int</span>(<span class="params">list_</span>):</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list_:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(i) == <span class="built_in">int</span>:</span><br><span class="line">            res.append(i)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用列表推导式进行改进</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_int2</span>(<span class="params">list_</span>):</span><br><span class="line">    <span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> list_ <span class="keyword">if</span> <span class="built_in">type</span>(i) == <span class="built_in">int</span>]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">get_int(list1)</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, 3, 4, 201, 202, 203]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">get_int2(list1)</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, 3, 4, 201, 202, 203]
</code></pre>
<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="文件的存储"><a href="#文件的存储" class="headerlink" title="文件的存储"></a>文件的存储</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将list1中的元素写入到本地文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;list.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(list1))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<h2 id="文件的读取"><a href="#文件的读取" class="headerlink" title="文件的读取"></a>文件的读取</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取本地的list.txt文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;list.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">list_1 = f.read()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1</span><br></pre></td></tr></table></figure>




<pre><code>&quot;[1, 2, 3, 4, False, &#39;end&#39;, 201, 202, 203]&quot;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(list_1)</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, 3, 4, False, &#39;end&#39;, 201, 202, 203]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;list.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    list_2 = f.read()</span><br><span class="line"><span class="built_in">print</span>(list_2)</span><br></pre></td></tr></table></figure>

<pre><code>[1, 2, 3, 4, False, &#39;end&#39;, 201, 202, 203]
</code></pre>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>scikit-learn库</title>
    <url>/2024/11/28/scikit-learn%E5%BA%93/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
