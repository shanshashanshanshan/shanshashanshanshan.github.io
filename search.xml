<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/07/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>linux常见操作</title>
    <url>/2024/07/14/linux%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="linux目录结构"><a href="#linux目录结构" class="headerlink" title="linux目录结构"></a>linux目录结构</h2><ul>
<li>linux文件系统没有盘符的概念，就是没有C盘，D盘等等，所有的文件入口是从根目录开始</li>
<li>系统自带的文件不要删或者修改</li>
</ul>
<h2 id="linux命令（重点）"><a href="#linux命令（重点）" class="headerlink" title="linux命令（重点）"></a>linux命令（重点）</h2><h5 id="命令格式：command-option-paramaters"><a href="#命令格式：command-option-paramaters" class="headerlink" title="命令格式：command -option paramaters"></a>命令格式：command -option paramaters</h5><p>绝对路径：从根目录开始</p>
<p>相对路径：从当前目录开始</p>
<h3 id="ls：list的缩写"><a href="#ls：list的缩写" class="headerlink" title="ls：list的缩写"></a>ls：list的缩写</h3><ul>
<li>查看指定目录下的文件和文件夹（内容）</li>
<li>ls：查看当前目录的内容（文件和文件夹），绝对路径写法</li>
<li>ls &#x2F;root：查看指定目录&#x2F;root里面的内容，相对路径写法</li>
<li>ls &#x2F;root&#x2F;home： 同时查看多个目录下的内容<ul>
<li>-a ：all 所有，隐藏和非隐藏的文件和文件夹<ul>
<li>ls -a：查看当前目录下的隐藏和非隐藏的文件和文件夹</li>
<li>ls -a &#x2F;home：查看指定目录下隐藏和非隐藏的文件和文件夹</li>
</ul>
</li>
<li>-l：list简写，列表显示，以列表形式显示指定目录下的文件和文件夹<ul>
<li>ls -l：以列表形式显示当前目录下的文件和文件夹</li>
<li>ls -l &#x2F;home：-ls -l &#x2F;home :以列表形式显示指定目录下的内容，绝对路径</li>
<li>ll ：ls -l简写</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="ps-process-status-进程状态"><a href="#ps-process-status-进程状态" class="headerlink" title="ps: process status,进程状态-"></a>ps: process status,进程状态-</h3><ul>
<li>ps -ef:查看当前正在运行的进程</li>
</ul>
<h3 id="kill：终止"><a href="#kill：终止" class="headerlink" title="kill：终止"></a>kill：终止</h3><ul>
<li><p>kill 37922 ：终止进程37922，有时候不一定会终止进程</p>
</li>
<li><p>kill -9 37949：杀死进程37949，一定会杀死进程</p>
</li>
<li><p>kill -l：查看kill命令的所有信号</p>
</li>
</ul>
<h3 id="ifconfig：查看虚拟机的网络配置信息"><a href="#ifconfig：查看虚拟机的网络配置信息" class="headerlink" title="ifconfig：查看虚拟机的网络配置信息"></a>ifconfig：查看虚拟机的网络配置信息</h3><ul>
<li>windows：ipconfig</li>
<li>iOS：ifconfig</li>
</ul>
<h3 id="clear：清屏命令"><a href="#clear：清屏命令" class="headerlink" title="clear：清屏命令"></a>clear：清屏命令</h3><ul>
<li>也可以用ctrl + l 来替代，也是清屏</li>
</ul>
<h3 id="pwd：显示当前目录的绝对路径"><a href="#pwd：显示当前目录的绝对路径" class="headerlink" title="pwd：显示当前目录的绝对路径"></a>pwd：显示当前目录的绝对路径</h3><h3 id="shutdown：关机"><a href="#shutdown：关机" class="headerlink" title="shutdown：关机"></a>shutdown：关机</h3><ul>
<li>reboot：重启</li>
<li>shutdown -h now：立马关机</li>
<li>halt：不断电关机</li>
</ul>
<h3 id="cd：change-directory，切换目录"><a href="#cd：change-directory，切换目录" class="headerlink" title="cd：change directory，切换目录"></a>cd：change directory，切换目录</h3><ul>
<li>cd:切换到当前登录用户的家目录，如果是itcast用户登录的，就回到&#x2F;home&#x2F;itcast,如果是root用户登录的就回到&#x2F;root</li>
<li>cd  &#x2F;big59&#x2F;test1: 切换到&#x2F;big59&#x2F;test1目录下</li>
<li>cd .. :返回上一级目录</li>
<li>cd -：在最近的两个目录间切换</li>
<li>cd &#x2F; ：切换到根目录</li>
</ul>
<h3 id="hostname：查看当前服务器的主机名称"><a href="#hostname：查看当前服务器的主机名称" class="headerlink" title="hostname：查看当前服务器的主机名称"></a>hostname：查看当前服务器的主机名称</h3><h3 id="mkdir：make-directory，创建文件夹"><a href="#mkdir：make-directory，创建文件夹" class="headerlink" title="mkdir：make directory，创建文件夹"></a>mkdir：make directory，创建文件夹</h3><ul>
<li>cd &#x2F;bigdata_59:</li>
<li>cd &#x2F;bigdata_59 :先切换到&#x2F;bigdata_59目录下</li>
<li>mkdir test3 :在当前目录下创建文件夹test3，相对路径</li>
<li>mkdir &#x2F;big59&#x2F;test3 :在指定目录下创建文件夹test3，绝对路径</li>
<li>-p :递归创建有层级的文件夹，先检查，判断之后再创建<ul>
<li>mkdir -p test1&#x2F;test11&#x2F;test111 :在test1里面检查是否有test11，如果有就不管直接在test11里面创建test111，如果test11不存<br>在，先创建test11，再到test11里面创建test111</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/07/15/testcode/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>hhh</p>
]]></content>
  </entry>
  <entry>
    <title>python标注</title>
    <url>/2024/08/03/python%E6%A0%87%E6%B3%A8/</url>
    <content><![CDATA[<h2 id="常见代码块"><a href="#常见代码块" class="headerlink" title="常见代码块"></a>常见代码块</h2><h3 id="合并数据表"><a href="#合并数据表" class="headerlink" title="合并数据表"></a>合并数据表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#选取基本信息表和公开课教学表并合并</span></span><br><span class="line">basic_info_df=all_dataframe_dict[<span class="string">&#x27;基本信息&#x27;</span>].copy()</span><br><span class="line">subject_teach_df=all_dataframe_dict[<span class="string">&quot;公开课教学&quot;</span>].copy()</span><br><span class="line">merge_df=pd.merge(basic_info_df,subject_teach_df,on=<span class="string">&#x27;关联主键&#x27;</span>,how=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#从all_dataframe_dict中取出基本信息表，本人奖项表</span></span><br><span class="line">basic_info_df=all_dataframe_dict[<span class="string">&quot;基本信息&quot;</span>].copy()</span><br><span class="line">reward_info_df=all_dataframe_dict[<span class="string">&quot;本人奖项&quot;</span>].copy()</span><br><span class="line"><span class="comment">#合并数据表</span></span><br><span class="line">merge_df=pd.merge(basic_info_df,reward_info_df,on=<span class="string">&#x27;关联主键&#x27;</span>,how=<span class="string">&#x27;left&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="柱状图相关"><a href="#柱状图相关" class="headerlink" title="柱状图相关"></a>柱状图相关</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基于&quot;基本信息”表的&quot;民族&quot;字段进行统计分析</span></span><br><span class="line">df_basic_info = all_dataframe_dict[<span class="string">&quot;基本信息&quot;</span>].copy()</span><br><span class="line">nation_count = df_basic_info.groupby(<span class="string">&quot;民族&quot;</span>)[<span class="string">&quot;关联主键&quot;</span>].nunique().reset_index()</span><br><span class="line">nation_count.columns = [<span class="string">&quot;民族&quot;</span>,<span class="string">&quot;人数&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照人数进行排序</span></span><br><span class="line">nation_count = nation_count.sort_values(<span class="string">&#x27;人数&#x27;</span>,ascending=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#制作柱状图进行展示</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">sns.barplot(data=nation_count,x=<span class="string">&quot;民族&quot;</span>,y=<span class="string">&quot;人数&quot;</span>,palette=<span class="string">&quot;viridis&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;我校各民族教师的人数统计&#x27;</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">90</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#展示统计结果</span></span><br><span class="line">nation_count</span><br></pre></td></tr></table></figure>

<h3 id="饼图相关"><a href="#饼图相关" class="headerlink" title="饼图相关"></a>饼图相关</h3><ul>
<li><p>统计参与过远郊区交流轮岗的专任教划师占比</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从教师基本信息表中选取所有专任教师的数据</span></span><br><span class="line">basic_info_df=all_dataframe_dict[<span class="string">&quot;基本信息&quot;</span>].copy()</span><br><span class="line">exchange_rotation_df=all_dataframe_dict[<span class="string">&quot;交流轮岗&quot;</span>].copy()</span><br><span class="line"></span><br><span class="line"><span class="comment">#从交流轮岗表中选取参与过远郊区交流轮岗的教师数据</span></span><br><span class="line">far_suburb_exchange_df=exchange_rotation_df[exchange_rotation_df[<span class="string">&quot;交流形式&quot;</span>]==<span class="string">&quot;远郊区交流轮岗&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#合并两张表，使用关联主键进行关联</span></span><br><span class="line">merged_df=pd.merge(basic_info_df,far_suburb_exchange_df,on=<span class="string">&quot;关联主键&quot;</span>，how=<span class="string">&quot;inner&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#可视化展示</span></span><br><span class="line">comt8_df=merged_df[<span class="string">&quot;教职工类别&quot;</span>].value_counts().sort_index()</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">plt.pie(counts_df,labels=counts_df.index,autopct=<span class="string">&#x27;%1.1f%%&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建DataFrame</span></span><br><span class="line">df=pd.DataFrame(&#123;<span class="string">&#x27;教职工类别&#x27;</span>:counts_.df.index,<span class="string">&#x27;人数&#x27;</span>:counts_df.values&#125;)</span><br><span class="line"><span class="comment">#按人数降序排序</span></span><br><span class="line">df=df.sort_values(<span class="string">&#x27;人数&#x27;</span>,ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#重置索引</span></span><br><span class="line">df = df.reset_index(drop=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#打印结果</span></span><br><span class="line">df[<span class="string">&quot;占比&quot;</span>]=df[<span class="string">&quot;人数&quot;</span>]/df[<span class="string">&quot;人数&quot;</span>].<span class="built_in">sum</span>()</span><br><span class="line">df</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="语义顺序"><a href="#语义顺序" class="headerlink" title="语义顺序"></a>语义顺序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义年级顺序</span></span><br><span class="line">grade_order = [<span class="string">&#x27;一年级&#x27;</span>,<span class="string">&#x27;二年级&#x27;</span>, <span class="string">&#x27;三年级&#x27;</span>, <span class="string">&#x27;四年级&#x27;</span>, <span class="string">&#x27;五年级&#x27;</span>, <span class="string">&#x27;六年级&#x27;</span>, <span class="string">&#x27;初一&#x27;</span>, <span class="string">&#x27;初二&#x27;</span>, <span class="string">&#x27;初三&#x27;</span>, <span class="string">&#x27;高一&#x27;</span>, <span class="string">&#x27;高二&#x27;</span>, <span class="string">&#x27;高三&#x27;</span>]</span><br><span class="line"><span class="comment"># 将年级转换为分类型变量，并指定排序顺序</span></span><br><span class="line">merged_df[<span class="string">&#x27;年级&#x27;</span>] = pd.Categorical(merged_df[<span class="string">&#x27;年级&#x27;</span>], categories=grade_order, ordered=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 对学业测评类型进行统计</span></span><br><span class="line">performance_count = merged_df.groupby([<span class="string">&quot;年级&quot;</span>, <span class="string">&quot;学业测评类型&quot;</span>]).size().reset_index(name=<span class="string">&#x27;count&#x27;</span>)</span><br><span class="line"><span class="comment"># 按照年级排序</span></span><br><span class="line">performance_count = performance_count.sort_values(<span class="string">&#x27;年级&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义奖项级别的排序顺序</span></span><br><span class="line">sort_order = [<span class="string">&quot;校级&quot;</span>,<span class="string">&quot;集团(学区)&quot;</span>,<span class="string">&quot;乡镇级&quot;</span>,<span class="string">&quot;区县级&quot;</span>,<span class="string">&quot;市级&quot;</span>,<span class="string">&quot;省级&quot;</span>,<span class="string">&quot;国家级&quot;</span>,<span class="string">&quot;全部&quot;</span>]</span><br><span class="line">base_info_df[<span class="string">&#x27;奖项级别&#x27;</span>] = pd.Categorical(base_info_df[<span class="string">&#x27;奖项级别&#x27;</span>], categories=sort_order, ordered=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常见语义顺序</span></span><br><span class="line">岗位等级：[<span class="string">&#x27;专技13级&#x27;</span>,<span class="string">&#x27;专技12级&#x27;</span>,<span class="string">&#x27;专技11级&#x27;</span>,<span class="string">&#x27;专技10级&#x27;</span>,<span class="string">&#x27;专技9级&#x27;</span>,<span class="string">&#x27;专技8级&#x27;</span>,<span class="string">&#x27;专技7级&#x27;</span>,<span class="string">&#x27;专技6级&#x27;</span>,<span class="string">&#x27;专技5级&#x27;</span>,<span class="string">&#x27;专技4级&#x27;</span>,<span class="string">&#x27;专技3级&#x27;</span>,<span class="string">&#x27;专技2级&#x27;</span>,<span class="string">&#x27;专技1级&#x27;</span>]</span><br><span class="line">本人奖项，奖项级别：[<span class="string">&quot;校级&quot;</span>,<span class="string">&quot;集团(学区)&quot;</span>,<span class="string">&quot;乡镇级&quot;</span>,<span class="string">&quot;区县级&quot;</span>,<span class="string">&quot;市级&quot;</span>,<span class="string">&quot;省级&quot;</span>,<span class="string">&quot;国家级&quot;</span>,<span class="string">&quot;全部&quot;</span>]</span><br><span class="line">公开课级别：[<span class="string">&quot;其他&quot;</span>,<span class="string">&quot;校级&quot;</span>,<span class="string">&quot;学区级&quot;</span>,<span class="string">&quot;区县级&quot;</span>,<span class="string">&quot;市级&quot;</span>,<span class="string">&quot;省级&quot;</span>,<span class="string">&quot;国家级&quot;</span>]</span><br><span class="line">刊物级别：[<span class="string">&#x27;其他&#x27;</span>,<span class="string">&#x27;校级普刊&#x27;</span>,<span class="string">&#x27;学区级普刊&#x27;</span>,<span class="string">&#x27;区级普刊&#x27;</span>,<span class="string">&#x27;市级普刊&#x27;</span>,<span class="string">&#x27;省部级普刊&#x27;</span>,<span class="string">&#x27;国家级普刊&#x27;</span>,<span class="string">&#x27;核心期刊&#x27;</span>]</span><br><span class="line">课题研究：[<span class="string">&#x27;校级课题&#x27;</span>,<span class="string">&#x27;区县级课题&#x27;</span>,<span class="string">&#x27;市厅级课题&#x27;</span>,<span class="string">&#x27;省部级课题&#x27;</span>,<span class="string">&#x27;国家级课题&#x27;</span>,<span class="string">&#x27;全部&#x27;</span>]</span><br><span class="line">学历：[<span class="string">&#x27;其他&#x27;</span>,<span class="string">&#x27;中等职业&#x27;</span>,<span class="string">&#x27;普通高中&#x27;</span>,<span class="string">&#x27;大学专科&#x27;</span>,<span class="string">&#x27;大学本科&#x27;</span>,<span class="string">&#x27;硕士研究生&#x27;</span>,<span class="string">&#x27;博士研究生&#x27;</span>,<span class="string">&#x27;全部&#x27;</span>]</span><br><span class="line">本人角色——论文：[<span class="string">&quot;其他作者&quot;</span>,<span class="string">&quot;第二作者&quot;</span>,<span class="string">&quot;通讯作者&quot;</span>,<span class="string">&quot;第一作者&quot;</span>]</span><br><span class="line">培训学习：[<span class="string">&quot;其他&quot;</span>,<span class="string">&quot;校级&quot;</span>,<span class="string">&quot;区县级&quot;</span>,<span class="string">&quot;市级&quot;</span>,<span class="string">&quot;省级&quot;</span>,<span class="string">&quot;国家级&quot;</span>,<span class="string">&quot;全部&quot;</span>]</span><br><span class="line">职称级别：[<span class="string">&quot;未定&quot;</span>,<span class="string">&quot;三级&quot;</span>,<span class="string">&quot;二级&quot;</span>,<span class="string">&quot;一级&quot;</span>,<span class="string">&quot;高级&quot;</span>,<span class="string">&quot;正高级&quot;</span>,<span class="string">&quot;全部&quot;</span>]</span><br><span class="line">奖项等级：[<span class="string">&quot;优秀奖&quot;</span>,<span class="string">&quot;三等奖&quot;</span>,<span class="string">&quot;二等奖&quot;</span>,<span class="string">&quot;一等奖&quot;</span>,<span class="string">&quot;特等奖&quot;</span>]</span><br><span class="line">考核结果：[<span class="string">&quot;未参加考核&quot;</span>,<span class="string">&quot;不确定考核等级&quot;</span>,<span class="string">&quot;不合格&quot;</span>,<span class="string">&quot;基本合格&quot;</span>,<span class="string">&quot;合格&quot;</span>,<span class="string">&quot;良好&quot;</span>,<span class="string">&quot;优秀&quot;</span>]</span><br><span class="line">最高学历：[<span class="string">&quot;其他&quot;</span>,<span class="string">&quot;中等职业&quot;</span>,<span class="string">&quot;普通高中&quot;</span>,<span class="string">&quot;大学专科&quot;</span>,<span class="string">&quot;大学本科&quot;</span>,<span class="string">&quot;硕土研究生&quot;</span>,<span class="string">&quot;博士研究生&quot;</span>,<span class="string">&quot;全部&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="按出生日期逆序排序"><a href="#按出生日期逆序排序" class="headerlink" title="按出生日期逆序排序"></a>按出生日期逆序排序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df=df.sort_values(by=&#x27;出生日期&#x27;,ascending=False)</span><br></pre></td></tr></table></figure>

<h3 id="计算人数"><a href="#计算人数" class="headerlink" title="计算人数"></a>计算人数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算人数</span></span><br><span class="line">num=df_result[<span class="string">&quot;关联主键&quot;</span>].nunique()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;老师人数为：&quot;</span>,num,<span class="string">&quot;人&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="字典结果转化为dataframe"><a href="#字典结果转化为dataframe" class="headerlink" title="字典结果转化为dataframe:"></a>字典结果转化为dataframe:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果不是，请先创建这个 Series</span></span><br><span class="line"><span class="comment"># 创建 DataFrame</span></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;本人角色&#x27;</span>: Name.index, <span class="string">&#x27;人数&#x27;</span>: Name.values&#125;)</span><br><span class="line"><span class="comment"># 按人数降序排序</span></span><br><span class="line">df = df.sort_values(<span class="string">&#x27;人数&#x27;</span>, ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 重置索引</span></span><br><span class="line">df = df.reset_index(drop=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<h3 id="修改列名"><a href="#修改列名" class="headerlink" title="修改列名"></a>修改列名</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重命名列 &#x27;B&#x27; 为 &#x27;New_B&#x27;</span></span><br><span class="line">df = df.rename(columns=&#123;<span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;New_B&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="提取近5年的数据"><a href="#提取近5年的数据" class="headerlink" title="提取近5年的数据"></a>提取近5年的数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将&quot;获奖日期&quot;字段转换为datetime美型，并筛选出近5年的数据</span></span><br><span class="line">df_award[<span class="string">&#x27;获奖日期&#x27;</span>]=pd.to_datetime(df_award[<span class="string">&#x27;获奖日期&#x27;</span>])</span><br><span class="line">start_date = pd.to_datetime(<span class="string">&#x27;today&#x27;</span>).year -<span class="number">4</span></span><br><span class="line">df_award=df_award[df_award[<span class="string">&#x27;获奖日期&#x27;</span>].dt.year&gt;=start_date]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提取近5年的数据</span></span><br><span class="line">df_recent_5year = df_exchange[df_exchange[<span class="string">&#x27;年份&#x27;</span>]&gt;=pd.Timestamp.now().year-<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造一个新的数据表，对各年份的交流形式为城市学区交流轮岗的教师数量进行统计</span></span><br><span class="line">df_city_school = df_recent_5year[df_recent_5year[<span class="string">&#x27;交流形式&#x27;</span>]==<span class="string">&#x27;城区学区交流轮岗&#x27;</span>].groupby(<span class="string">&#x27;年份&#x27;</span>).size().reset_index()</span><br><span class="line">df_city_school.columns=[<span class="string">&#x27;年份&#x27;</span>,<span class="string">&#x27;城区学区交流轮岗数量&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造一个新的数据表，对各年份的所有教师交流轮岗数量进行统计</span></span><br><span class="line">df_total=dr_recent_5year.groupby(<span class="string">&#x27;年份&#x27;</span>).size().reset_index()</span><br><span class="line">df_total.columns=[<span class="string">&#x27;年份&#x27;</span>,<span class="string">&#x27;全部数量&#x27;</span></span><br><span class="line"><span class="comment">#按照年份将两个数据表进行合并</span></span><br><span class="line">df_merge=pd.merge (df_city_school,df_total,on=<span class="string">&#x27;年份&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#筛选近三年入校的老师</span></span><br><span class="line">three_years_ago=pd.to_datetime(<span class="string">&#x27;today&#x27;</span>)-pd.DateOffset(years=<span class="number">3</span>)</span><br><span class="line">new_teacher_df=teacher_df[teacher_df[<span class="string">&#x27;入校时间&#x27;</span>]&gt;three_years_ago]</span><br></pre></td></tr></table></figure>

<h3 id="我校今年新聘教师中，是否存在未获得教资证书的人"><a href="#我校今年新聘教师中，是否存在未获得教资证书的人" class="headerlink" title="我校今年新聘教师中，是否存在未获得教资证书的人"></a>我校今年新聘教师中，是否存在未获得教资证书的人</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">merged_df[<span class="string">&#x27;岗位聘任时间&#x27;</span>]=pd.to datetime(merged_df[<span class="string">&#x27;岗位聘任时间&#x27;</span>]，<span class="built_in">format</span>=<span class="string">&#x27;%Y.%m.%d&#x27;</span>)</span><br><span class="line">merged_df[<span class="string">&#x27;年份&#x27;</span>]=merged_df[<span class="string">&#x27;岗位聘任时间&#x27;</span>].dt.year</span><br><span class="line"></span><br><span class="line"><span class="comment">#筛选出今年新聘的教师</span></span><br><span class="line">this_year=merged_df[merged_df[<span class="string">&#x27;年份&#x27;</span>]==pd.to_datetime(<span class="string">&#x27;today&#x27;</span>).year]</span><br><span class="line"></span><br><span class="line"><span class="comment">#筛选出未获得教资证书的教师</span></span><br><span class="line">teachers_no_certificate=this_year[this_year[<span class="string">&#x27;教师资格证编号&#x27;</span>].isnull()]</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line">teachers_no_certificate=teachers_no_certificate.reset_index()</span><br><span class="line">teachers_no_certificate=teachers_no_certificate[<span class="string">&#x27;姓名&#x27;</span>，<span class="string">&#x27;岗位聘任时间&#x27;</span>，<span class="string">&#x27;教师资格证编号&#x27;</span>]</span><br><span class="line">teachers_no_certificate</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[<span class="string">&quot;教师姓名&quot;</span>,<span class="string">&quot;作品名称&quot;</span>,<span class="string">&quot;学校名称&quot;</span>,<span class="string">&quot;发表刊物&quot;</span>,<span class="string">&quot;刊物级别&quot;</span>,<span class="string">&quot;本人角色&quot;</span>]]</span><br></pre></td></tr></table></figure>

<h3 id="年龄"><a href="#年龄" class="headerlink" title="年龄"></a>年龄</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计算教师的年龄</span></span><br><span class="line">today = pd.to_datetime(<span class="string">&#x27;today&#x27;</span>,<span class="built_in">format</span>=<span class="string">&#x27;%Y.%m.%d&#x27;</span>)</span><br><span class="line">merge_df[<span class="string">&#x27;出生日期&#x27;</span>]=pd.to_datetime(merge_df[<span class="string">&#x27;出生日期&#x27;</span>],<span class="built_in">format</span>=<span class="string">&#x27;%Y.%m.%d&#x27;</span>)</span><br><span class="line">merge_df[<span class="string">&#x27;年龄&#x27;</span>]=today.year-merge_df[<span class="string">&#x27;出生日期&#x27;</span>].dt.year</span><br><span class="line"></span><br><span class="line"><span class="comment">#筛选出年龄小于35岁的教师</span></span><br><span class="line">merge_df = merge_df[merge_df[<span class="string">&#x27;年龄&#x27;</span>]&lt;<span class="number">35</span>]</span><br></pre></td></tr></table></figure>

<h3 id="学科竞赛"><a href="#学科竞赛" class="headerlink" title="学科竞赛"></a>学科竞赛</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;学科奥林匹克竞赛&#x27;</span>,<span class="string">&#x27;自然科学素养类(部级官方赛事)&#x27;</span>,<span class="string">&#x27;自然科学素养类(其他级别比赛)&#x27;</span>,<span class="string">&#x27;人文综合素养类(部级官方赛事)&#x27;</span>,<span class="string">&#x27;人文综合素养类(其他级别比赛)&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="近一年"><a href="#近一年" class="headerlink" title="近一年:"></a>近一年:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取近一年发表论文的时间范围</span></span><br><span class="line">paper_df[<span class="string">&quot;发表年月&quot;</span>] = pd.to_datetime(paper_df[<span class="string">&quot;发表年月&quot;</span>])</span><br><span class="line">start_date = pd.to_datetime(<span class="string">&quot;today&quot;</span>) - pd.DateOffset(days=<span class="number">365</span>)</span><br><span class="line">recent_papers = paper_df[paper_df[<span class="string">&quot;发表年月&quot;</span>] &gt;=start_date]</span><br></pre></td></tr></table></figure>

<h2 id="犯过的错误："><a href="#犯过的错误：" class="headerlink" title="犯过的错误："></a>犯过的错误：</h2><ul>
<li><p>query中涉及本人奖项级别的，记得勾上“<strong>查询教师个人奖项级别分布</strong>”;</p>
</li>
<li><p>查看知识元的语义顺序是否有漏选；</p>
</li>
<li><p>筛选后连接表要用inner；</p>
</li>
<li><p>改代码的时候记得注释也要看一下，别忘了<strong>改注释</strong>；</p>
</li>
<li><p>注意<strong>rotation</strong>什么时候用，什么时候改为90，以及figure<strong>（10，6）</strong>；</p>
</li>
<li><p>&#x3D;还是&gt;,看清楚题目；</p>
</li>
<li><p>涉及到教师名单的，求“哪些教师”等的query,记得<strong>print一下人数</strong>；</p>
</li>
<li><p>注意关联树的字段与输出表格是否一致（常见遗漏：姓名，性别）；</p>
</li>
<li><p>“有哪些老师有过以第一作者身份在国家级期刊上发表论文的记录”，在这个query中，“<strong>国家级期刊”</strong>：既要筛选刊物级别：国家级普刊，也要筛选发表刊物为：期刊刊物；<br>query中出现“第一作者”，不需要筛选“一作”这个知识元；</p>
</li>
<li><p>统计人数用nunique();</p>
</li>
<li><p>注意字符串筛选规范，什么时候用“&#x3D;&#x3D;”，什么时候用“str.contains”;</p>
</li>
<li><p>涉及教师的学科分布记得用“<strong>主授学科</strong>”</p>
</li>
</ul>
<h2 id="知识元的作用是用来澄清概念的；"><a href="#知识元的作用是用来澄清概念的；" class="headerlink" title="知识元的作用是用来澄清概念的；"></a>知识元的作用是用来澄清概念的；</h2><h3 id="query：请帮我筛选出所有5年内校外合作果题名称；这里的五年内再加上一个"><a href="#query：请帮我筛选出所有5年内校外合作果题名称；这里的五年内再加上一个" class="headerlink" title="query：请帮我筛选出所有5年内校外合作果题名称；这里的五年内再加上一个&lt;&#x3D;today（如果问近n年也是一样）"></a>query：请帮我筛选出所有5年内校外合作果题名称；这里的五年内再加上一个&lt;&#x3D;today（如果问近n年也是一样）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将完成时间转换为日期格式</span></span><br><span class="line">df_course_research[<span class="string">&quot;完成时间&quot;</span>] = pd.to_datetime(df_course_research[<span class="string">&quot;完成时间&quot;</span>],<span class="built_in">format</span>=<span class="string">&#x27;%Y.%m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#筛选最近5年的数据</span></span><br><span class="line">start_date = pd.to_datetime(<span class="string">&#x27;today&#x27;</span>).year -<span class="number">4</span></span><br><span class="line">df_course_research = df_course_research[(df_course_research[<span class="string">&#x27;完成时间&#x27;</span>].dt.year&gt;=start_date) &amp; (df_course_research[<span class="string">&#x27;完成时间&#x27;</span>]=pd.to_datetime(<span class="string">&#x27;today&#x27;</span>))]</span><br></pre></td></tr></table></figure>



<h3 id="用value-counts统计："><a href="#用value-counts统计：" class="headerlink" title="用value_counts统计："></a>用value_counts统计：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 用groupby统计：</span></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="图形的横坐标顺序和表格的横坐标顺序输出不一致："><a href="#图形的横坐标顺序和表格的横坐标顺序输出不一致：" class="headerlink" title="图形的横坐标顺序和表格的横坐标顺序输出不一致："></a>图形的横坐标顺序和表格的横坐标顺序输出不一致：</h3><h1 id="典型例题"><a href="#典型例题" class="headerlink" title="典型例题"></a>典型例题</h1><h2 id="2019年获得市级及以上特等奖本人奖项的教师有哪些"><a href="#2019年获得市级及以上特等奖本人奖项的教师有哪些" class="headerlink" title="2019年获得市级及以上特等奖本人奖项的教师有哪些"></a>2019年获得市级及以上特等奖本人奖项的教师有哪些</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关联字段：查询教师个人奖项级别分布</span><br><span class="line">知识元：本人奖项&gt;奖项级别&gt;语义顺序</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从all_dataframe_dict中取出&quot;本人奖项”表</span></span><br><span class="line">award_df=all_dataframe_dict[<span class="string">&quot;本人奖项&quot;</span>].copy()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义奖项级别的排序顺序</span></span><br><span class="line">ort_order=[<span class="string">&quot;校级&quot;</span>,<span class="string">&quot;集团（学区）&quot;</span>,<span class="string">&quot;乡镇级&quot;</span>,<span class="string">&quot;区县级&quot;</span>,<span class="string">&quot;市级&quot;</span>,<span class="string">&quot;省级&quot;</span>,<span class="string">&quot;国家级&quot;</span>,<span class="string">&quot;全部&quot;</span>]</span><br><span class="line">award_df[<span class="string">&#x27;奖顶级别&#x27;</span>]=pd.Categorical(award_df[<span class="string">&#x27;奖项级别&#x27;</span>],categories=sort_order,ordered=<span class="literal">True</span>)</span><br><span class="line">           </span><br><span class="line"><span class="comment">#将获奖日期改为日期格式</span></span><br><span class="line">award_df[<span class="string">&#x27;获奖日期&#x27;</span>]=pd.to_datetime(award_df[<span class="string">&#x27;获奖日期&#x27;</span>])</span><br><span class="line">           </span><br><span class="line"><span class="comment">#筛选出2019年获得市级及以上特等奖的教师</span></span><br><span class="line">selected_df = award_df[(award_df[<span class="string">&quot;获奖日期&quot;</span>].dt.year=<span class="number">2019</span>)&amp;</span><br><span class="line">                       (award_df[<span class="string">&quot;奖项级别&quot;</span>]&gt;=<span class="string">&quot;市级&quot;</span>)&amp;</span><br><span class="line">                       (award_df[<span class="string">&quot;奖项等级&quot;</span>]=<span class="string">&quot;特等奖“)]</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">#计算人数</span></span><br><span class="line"><span class="string">num=selected_df[&quot;</span>关联主键<span class="string">&quot;].nunique()</span></span><br><span class="line"><span class="string">print(&quot;</span><span class="number">2019</span>年获得市级及以上特等奖本人奖项的教师人数为：<span class="string">&quot;,num,&quot;</span>人<span class="string">&quot;)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">#打印结果</span></span><br><span class="line"><span class="string">elected_df=selected_df.sort_values(&quot;</span>奖项级别<span class="string">&quot;)</span></span><br><span class="line"><span class="string">elected_df[[&quot;</span>教师姓名<span class="string">&quot;,&quot;</span>奖项名称<span class="string">&quot;,&quot;</span>奖项类别<span class="string">&quot;,&quot;</span>奖项级别<span class="string">&quot;,&quot;</span>奖项等级<span class="string">&quot;,&quot;</span>获奖日期<span class="string">&quot;].reset_index(drop=True)</span></span><br></pre></td></tr></table></figure>



<h2 id="查询2012年以来我校教师在省部级及以上”论坛刊物”上发表过的文章名称"><a href="#查询2012年以来我校教师在省部级及以上”论坛刊物”上发表过的文章名称" class="headerlink" title="查询2012年以来我校教师在省部级及以上”论坛刊物”上发表过的文章名称"></a>查询2012年以来我校教师在省部级及以上”论坛刊物”上发表过的文章名称</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关联字段：查询科研成果级别</span><br><span class="line">知识元：论文发表刊物级别&gt;&gt;语义顺序</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从all_dataframe_dict中提取&quot;论文发表”数据表</span></span><br><span class="line">paper_publish_df = all_dataframe_dict[<span class="string">&quot;论文发表&quot;</span>].copy()</span><br><span class="line"></span><br><span class="line"><span class="comment">#对时间字段进行筛选，获取2012年以来的数据</span></span><br><span class="line">paper_publish_df[<span class="string">&quot;发表年月&quot;</span>]=pd.to_datetime(paper_publish_df[<span class="string">&quot;发表年月“],format=&quot;</span>%Y.%m<span class="string">&quot;)</span></span><br><span class="line"><span class="string">paper_publish_df=paper_publish_df[paper_publish_df[&quot;</span>发表年月<span class="string">&quot;].dt.year&gt;=2012]</span></span><br><span class="line"><span class="string">                                                         </span></span><br><span class="line"><span class="string">#定义刊物级别的排序顺序</span></span><br><span class="line"><span class="string">sort_ordr=[&#x27;其他&#x27;,&#x27;校级普刊&#x27;,&#x27;学区级普刊&#x27;,&#x27;区级普刊&#x27;,&#x27;市级普刊&#x27;,&#x27;省部级普刊&#x27;,&#x27;国家级普刊&#x27;,&#x27;核心期刊&#x27;]</span></span><br><span class="line"><span class="string">paper_publish_df=paper_publish_df.copy()</span></span><br><span class="line"><span class="string">paper_publish_df[&quot;</span>刊物级别<span class="string">&quot;] = pd.Categorical(paper_publish_df[&quot;</span>刊物级     别<span class="string">&quot;],categories=sort_order,ordered=True)</span></span><br><span class="line"><span class="string">                                                         </span></span><br><span class="line"><span class="string">#筛选出省级及以上论坛刊物</span></span><br><span class="line"><span class="string">result_df=paper_publish_df[(paper_publish_df[&quot;</span>刊物级别<span class="string">&quot;]&gt;=&quot;</span>省部级普刊<span class="string">&quot;) &amp;</span></span><br><span class="line"><span class="string">(paper_publish_df[&quot;</span>发表刊物<span class="string">&quot;]==&quot;</span>论坛刊物<span class="string">&quot;)]</span></span><br><span class="line"><span class="string">                                                         </span></span><br><span class="line"><span class="string">#展示数据，使用富文本展示</span></span><br><span class="line"><span class="string">print(&quot;</span><span class="number">2012</span>年以来我校教师在省部级及以上论坛刊物上发表过的文章名称有:<span class="string">&quot;,len(result_df),&quot;</span>个<span class="string">&quot;)</span></span><br><span class="line"><span class="string">result_df=result_df.sort_values(&quot;</span>刊物级别<span class="string">&quot;)</span></span><br><span class="line"><span class="string">result_df.reset_index(drop=True)[&quot;</span>教师姓名<span class="string">&quot;,&quot;</span>作品名称<span class="string">&quot;,&quot;</span>发表年月<span class="string">&quot;,&quot;</span>发表刊物<span class="string">&quot;,&quot;</span>刊物级别<span class="string">&quot;,&quot;</span>本人角色<span class="string">&quot;]                                                         </span></span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>实习</tag>
      </tags>
  </entry>
  <entry>
    <title>公考概念扫盲</title>
    <url>/2024/08/05/%E5%85%AC%E8%80%83/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul>
<li><p><strong>国考</strong>：是指中央直属行政单位公务员招录考试。例如税务、海关、部委等中央直属部门。</p>
</li>
<li><p><strong>省考：</strong>是指省级管理机关公务员招录考试，例如省工信厅、市县级人民政府组成部门。</p>
</li>
<li><p><strong>联考：</strong>是指统一在2-3月份举办的各省省考。</p>
</li>
<li><p><strong>统考：</strong>是指2-3月份举办且试卷统一命制的各省省考。</p>
</li>
</ul>
<p>综上所述：国考与省考并列，省考包括联考，联考包括统考。</p>
<p><strong>国考省考不同点：</strong>考试时间不同，单位隶属序列不同、单位级别不同、待遇不同、考试题目略有差别。</p>
<p>​	今年国考，预计10月底左右开始报名，11月底或12月初进行笔试。</p>
<p>​	明年联考，预计1月初左右开始报名，1月底或者2月初进行笔试。</p>
<p><strong>国考省考相同点：</strong>行测申论题型相似，本质相同，国考一般引导省考发展。</p>
<p><strong>参加考试建议：</strong>逢考必参加，以上岸为主，教材视频通用，而且完全不矛盾。</p>
<p><strong>综合发展待遇：</strong>国考中央部委（例如中央统战部）&gt;省考省厅（例如省公安厅）&gt;国考垂管强势部门（例如税务）&gt;一般省考单位&gt;国考弱势垂管部门（例如气象）。</p>
<hr>
<h2 id="公考和事业编考试的区别和联系"><a href="#公考和事业编考试的区别和联系" class="headerlink" title="公考和事业编考试的区别和联系"></a>公考和事业编考试的区别和联系</h2><ol>
<li><strong>联系</strong>：<br>政府由机关（公务员）组成，而机关会下设事业单位。例如北京政府由政府办、工信局、住建局等单位构成，而住建局下又有物管办、房产处等单位。换句话说，事业单位隶属于机关单位。而公务员是在行政单位工作，事业编人员是在事业单位工作，公务员可以交流任职，但事业单位人员很难调到机关单位工作</li>
<li><strong>对比：</strong><ul>
<li>发展前景：公务员要略胜一筹，事业编制一般有限制</li>
<li>待遇报酬：绝大多数公务员要更好，少部分盈利性事业单位待遇较高。</li>
<li>笔试试卷方面：公务员考试行测申论逻辑性强，复习提高快；事业单位考试全国区别较大，绝大多数以公基为主，需要长期积累背诵。</li>
<li>面试考试方面：二者均以结构化为主，但公务员考试更加透明、公正、正规。</li>
<li>复习建议方面，综上所述，应该更以复习公务员考试为主，顺便参加事业单位考试，且不用专门复习。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="公考流程"><a href="#公考流程" class="headerlink" title="公考流程"></a>公考流程</h2><p>公布岗位、报名、缴费、笔试、查询笔试成绩、确认面试、面试、公示名单、政审、体检、入职。</p>
<p>公布岗位和报名一般在笔试前一个月，因此切勿等岗再报名。不用考虑是否有岗位，省考包容性非常大，也会设置较多的三不限岗位；反之，提高笔试成绩和竞争力是努力重点。</p>
<p>不要总纠结报哪里，选什么岗。无论考哪里，不都是考行测和申论吗</p>
<hr>
<h2 id="上岸分数"><a href="#上岸分数" class="headerlink" title="上岸分数"></a>上岸分数</h2><p>各省试卷难度不一，但基本遵循以下规律：<br>125分：有希望吃面<br>130分：大概率吃面<br>135分：有希望拿岗位笔试第一<br>140分：大概率拿岗位笔试第一<br>145分：能有较大优势进入面试<br>故，行测75分、申论70分应该是努力复习的目标和方向。<br>对于国考，整体难度会更大，分数也会更低，上述参考分数均可下调5分。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>公考</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2024/07/09/test/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建相关</title>
    <url>/2024/08/08/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<ul>
<li><p><img src="https://api2.mubu.com/v3/document_image/23703324_2dec1344-f2a8-401d-ac04-2df4eb04b0b1.png" alt="img"></p>
</li>
<li><p>hexo+github+netlify+cloudflare</p>
</li>
<li><p>博客生成框架</p>
<p>它的作用是将用户的输入转化成一个网站目录<br>​</p>
<ul>
<li>由一些html文件、css文件以及js文件组成的目录结构（前端三件套）</li>
</ul>
</li>
<li><p>文件托管平台<br>能够让我们把文件存储在云端，并提供相应的访问和修改的接口</p>
</li>
<li><p>站点部署服务</p>
<p>将一个已经成形的网站部署到互联网上，让网络上的其他主机能够正常访问（最简单的事github，上的github pages，但是这个方式国内的访问速度极慢，此教程中我们使用netlify作为我们部署站点的服务提供商，而把github仅仅作为一个托管文件的场所）</p>
<ul>
<li>netlify除了直接部署静态网络的功能之外，还支持动态的构建网站，也就是我们可以自定义一个构建网站的脚本，比如我们后面会使用的 npm run clean &amp;&amp;npm run build这个脚本，它会先清除之前已经构建好的静态网站，然后重新从头构建，以防某些地方的更新不到位</li>
</ul>
</li>
<li><p>CDN加速服务</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>网站</tag>
      </tags>
  </entry>
</search>
